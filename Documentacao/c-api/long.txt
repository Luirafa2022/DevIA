Objetos Inteiros
****************

Todos os inteiros são implementados como objetos inteiros "longos" de
tamanho arbitrário.

Em caso de erro, a maioria das APIs "PyLong_As*" retorna "(tipo de
retorno)-1" que não pode ser distinguido de um número. Use
"PyErr_Occurred()" para desambiguar.

type PyLongObject
    * Parte da API Limitada (como uma estrutura opaca).*

   Este subtipo de "PyObject" representa um objeto inteiro Python.

PyTypeObject PyLong_Type
    * Parte da ABI Estável.*

   Esta instância de "PyTypeObject" representa o tipo inteiro Python.
   Este é o mesmo objeto que "int" na camada Python.

int PyLong_Check(PyObject *p)

   Retorna true se seu argumento é um "PyLongObject" ou um subtipo de
   "PyLongObject". Esta função sempre tem sucesso.

int PyLong_CheckExact(PyObject *p)

   Retorna true se seu argumento é um "PyLongObject", mas não um
   subtipo de "PyLongObject". Esta função sempre tem sucesso.

PyObject *PyLong_FromLong(long v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Retorna um novo objeto "PyLongObject" de *v* ou "NULL" em caso de
   falha.

   The current implementation keeps an array of integer objects for
   all integers between "-5" and "256". When you create an int in that
   range you actually just get back a reference to the existing
   object.

PyObject *PyLong_FromUnsignedLong(unsigned long v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Return a new "PyLongObject" object from a C unsigned long, or
   "NULL" on failure.

PyObject *PyLong_FromSsize_t(Py_ssize_t v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Retorna um novo objeto "PyLongObject" de um "Py_ssize_t" C ou
   "NULL" em caso de falha.

PyObject *PyLong_FromSize_t(size_t v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Retorna um novo objeto "PyLongObject" de um "size_t" C ou "NULL" em
   caso de falha.

PyObject *PyLong_FromLongLong(long long v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Return a new "PyLongObject" object from a C long long, or "NULL" on
   failure.

PyObject *PyLong_FromUnsignedLongLong(unsigned long long v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Return a new "PyLongObject" object from a C unsigned long long, or
   "NULL" on failure.

PyObject *PyLong_FromDouble(double v)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Retorna um novo objeto "PyLongObject" da parte inteira de *v* ou
   "NULL" em caso de falha.

PyObject *PyLong_FromString(const char *str, char **pend, int base)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Return a new "PyLongObject" based on the string value in *str*,
   which is interpreted according to the radix in *base*, or "NULL" on
   failure.  If *pend* is non-"NULL", **pend* will point to the end of
   *str* on success or to the first character that could not be
   processed on error.  If *base* is "0", *str* is interpreted using
   the Inteiros literais definition; in this case, leading zeros in a
   non-zero decimal number raises a "ValueError".  If *base* is not
   "0", it must be between "2" and "36", inclusive.  Leading and
   trailing whitespace and single underscores after a base specifier
   and between digits are ignored.  If there are no digits or *str* is
   not NULL-terminated following the digits and trailing whitespace,
   "ValueError" will be raised.

   Ver também:

     Python methods "int.to_bytes()" and "int.from_bytes()" to convert
     a "PyLongObject" to/from an array of bytes in base "256". You can
     call those from C using "PyObject_CallMethod()".

PyObject *PyLong_FromUnicodeObject(PyObject *u, int base)
    *Retorna valor: Nova referência.*

   Converte uma sequência de dígitos Unicode na string *u* para um
   valor inteiro Python.

   Novo na versão 3.3.

PyObject *PyLong_FromVoidPtr(void *p)
    *Retorna valor: Nova referência.** Parte da ABI Estável.*

   Cria um inteiro Python a partir do ponteiro *p*. O valor do
   ponteiro pode ser recuperado do valor resultante usando
   "PyLong_AsVoidPtr()".

long PyLong_AsLong(PyObject *obj)
    * Parte da ABI Estável.*

   Return a C long representation of *obj*.  If *obj* is not an
   instance of "PyLongObject", first call its "__index__()" method (if
   present) to convert it to a "PyLongObject".

   Raise "OverflowError" if the value of *obj* is out of range for a
   long.

   Retorna "-1" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

   Alterado na versão 3.8: Use "__index__()" if available.

   Alterado na versão 3.10: This function will no longer use
   "__int__()".

long PyLong_AsLongAndOverflow(PyObject *obj, int *overflow)
    * Parte da ABI Estável.*

   Return a C long representation of *obj*.  If *obj* is not an
   instance of "PyLongObject", first call its "__index__()" method (if
   present) to convert it to a "PyLongObject".

   If the value of *obj* is greater than "LONG_MAX" or less than
   "LONG_MIN", set **overflow* to "1" or "-1", respectively, and
   return "-1"; otherwise, set **overflow* to "0".  If any other
   exception occurs set **overflow* to "0" and return "-1" as usual.

   Retorna "-1" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

   Alterado na versão 3.8: Use "__index__()" if available.

   Alterado na versão 3.10: This function will no longer use
   "__int__()".

long long PyLong_AsLongLong(PyObject *obj)
    * Parte da ABI Estável.*

   Return a C long long representation of *obj*.  If *obj* is not an
   instance of "PyLongObject", first call its "__index__()" method (if
   present) to convert it to a "PyLongObject".

   Raise "OverflowError" if the value of *obj* is out of range for a
   long long.

   Retorna "-1" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

   Alterado na versão 3.8: Use "__index__()" if available.

   Alterado na versão 3.10: This function will no longer use
   "__int__()".

long long PyLong_AsLongLongAndOverflow(PyObject *obj, int *overflow)
    * Parte da ABI Estável.*

   Return a C long long representation of *obj*.  If *obj* is not an
   instance of "PyLongObject", first call its "__index__()" method (if
   present) to convert it to a "PyLongObject".

   If the value of *obj* is greater than "LLONG_MAX" or less than
   "LLONG_MIN", set **overflow* to "1" or "-1", respectively, and
   return "-1"; otherwise, set **overflow* to "0".  If any other
   exception occurs set **overflow* to "0" and return "-1" as usual.

   Retorna "-1" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

   Novo na versão 3.2.

   Alterado na versão 3.8: Use "__index__()" if available.

   Alterado na versão 3.10: This function will no longer use
   "__int__()".

Py_ssize_t PyLong_AsSsize_t(PyObject *pylong)
    * Parte da ABI Estável.*

   Retorna uma representação de "Py_ssize_t" C de *pylong*. *pylong*
   deve ser uma instância de "PyLongObject".

   Levanta "OverflowError" se o valor de *pylong* estiver fora do
   intervalo de um "Py_ssize_t".

   Retorna "-1" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

unsigned long PyLong_AsUnsignedLong(PyObject *pylong)
    * Parte da ABI Estável.*

   Return a C unsigned long representation of *pylong*.  *pylong* must
   be an instance of "PyLongObject".

   Raise "OverflowError" if the value of *pylong* is out of range for
   a unsigned long.

   Retorna "(unsigned long)-1" no caso de erro.  Use
   "PyErr_Occurred()" para desambiguar.

size_t PyLong_AsSize_t(PyObject *pylong)
    * Parte da ABI Estável.*

   Retorna uma representação de "size_t" C de *pylong*. *pylong* deve
   ser uma instância de "PyLongObject".

   Levanta "OverflowError" se o valor de *pylong* estiver fora do
   intervalo de um "size_t".

   Retorna "(size)-1" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

unsigned long long PyLong_AsUnsignedLongLong(PyObject *pylong)
    * Parte da ABI Estável.*

   Return a C unsigned long long representation of *pylong*.  *pylong*
   must be an instance of "PyLongObject".

   Raise "OverflowError" if the value of *pylong* is out of range for
   an unsigned long long.

   Retorna "(unsigned long long)-1" no caso de erro.  Use
   "PyErr_Occurred()" para desambiguar.

   Alterado na versão 3.1: Um *pylong* negativo agora levanta
   "OverflowError", não "TypeError".

unsigned long PyLong_AsUnsignedLongMask(PyObject *obj)
    * Parte da ABI Estável.*

   Return a C unsigned long representation of *obj*.  If *obj* is not
   an instance of "PyLongObject", first call its "__index__()" method
   (if present) to convert it to a "PyLongObject".

   If the value of *obj* is out of range for an unsigned long, return
   the reduction of that value modulo "ULONG_MAX + 1".

   Retorna "(unsigned long)-1" no caso de erro.  Use
   "PyErr_Occurred()" para desambiguar.

   Alterado na versão 3.8: Use "__index__()" if available.

   Alterado na versão 3.10: This function will no longer use
   "__int__()".

unsigned long long PyLong_AsUnsignedLongLongMask(PyObject *obj)
    * Parte da ABI Estável.*

   Return a C unsigned long long representation of *obj*.  If *obj* is
   not an instance of "PyLongObject", first call its "__index__()"
   method (if present) to convert it to a "PyLongObject".

   If the value of *obj* is out of range for an unsigned long long,
   return the reduction of that value modulo "ULLONG_MAX + 1".

   Retorna "(unsigned long long)-1" no caso de erro.  Use
   "PyErr_Occurred()" para desambiguar.

   Alterado na versão 3.8: Use "__index__()" if available.

   Alterado na versão 3.10: This function will no longer use
   "__int__()".

double PyLong_AsDouble(PyObject *pylong)
    * Parte da ABI Estável.*

   Return a C double representation of *pylong*.  *pylong* must be an
   instance of "PyLongObject".

   Raise "OverflowError" if the value of *pylong* is out of range for
   a double.

   Retorna "-1.0" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

void *PyLong_AsVoidPtr(PyObject *pylong)
    * Parte da ABI Estável.*

   Convert a Python integer *pylong* to a C void pointer. If *pylong*
   cannot be converted, an "OverflowError" will be raised.  This is
   only assured to produce a usable void pointer for values created
   with "PyLong_FromVoidPtr()".

   Retorna "NULL" no caso de erro.  Use "PyErr_Occurred()" para
   desambiguar.

int PyUnstable_Long_IsCompact(const PyLongObject *op)

   *Esta é uma API Instável. Isso pode se alterado sem aviso em
   lançamentos menores.*

   Return 1 if *op* is compact, 0 otherwise.

   This function makes it possible for performance-critical code to
   implement a “fast path” for small integers. For compact values use
   "PyUnstable_Long_CompactValue()"; for others fall back to a
   "PyLong_As*" function or "calling" "int.to_bytes()".

   The speedup is expected to be negligible for most users.

   Exactly what values are considered compact is an implementation
   detail and is subject to change.

Py_ssize_t PyUnstable_Long_CompactValue(const PyLongObject *op)

   *Esta é uma API Instável. Isso pode se alterado sem aviso em
   lançamentos menores.*

   If *op* is compact, as determined by "PyUnstable_Long_IsCompact()",
   return its value.

   Otherwise, the return value is undefined.
