FAQ de Bibliotecas e Extensões
******************************


Questões gerais sobre bibliotecas
=================================


Como encontrar um módulo ou aplicação para realizar uma tarefa X?
-----------------------------------------------------------------

Verifique a Referência de Bibliotecas para ver se há um módulo
relevante da biblioteca padrão. (Eventualmente, você aprenderá o que
está na biblioteca padrão e poderá pular esta etapa.)

For third-party packages, search the Python Package Index or try
Google or another web search engine.  Searching for "Python" plus a
keyword or two for your topic of interest will usually find something
helpful.


Onde está o código-fonte do math.py (socket.py, regex.py, etc.)?
----------------------------------------------------------------

Se você não conseguir encontrar um arquivo de origem para um módulo,
ele pode ser um módulo embutido ou carregado dinamicamente,
implementado em C, C++ ou outra linguagem compilada. Nesse caso, você
pode não ter o arquivo de origem ou pode ser algo como "mathmodule.c",
em algum lugar do diretório de origem C (não no caminho do Python).

Existem (pelo menos) três tipos de módulos no Python:

1. módulos escritos em Python (.py)

2. módulos escritos em C e carregados dinamicamente (.dll, .pyd, .so,
   .sl, etc.);

3. módulos escritos em C e vinculados ao interpretador; para obter uma
   dessas listas, digite:

      import sys
      print(sys.builtin_module_names)


Como tornar um script Python executável no Unix?
------------------------------------------------

Você precisa fazer duas coisas: o arquivo do script deve ser
executável e a primeira linha deve começar com "#!" seguido do caminho
do interpretador Python.

Inicialmente, execute o "chmod +x scriptfile" ou, talvez, o "chmod 755
scriptfile".

A segunda coisa pode ser feita de várias maneiras. A maneira mais
direta é escrever

   #!/usr/local/bin/python

como a primeira linha do seu arquivo, usando o endereço do caminho
onde o interpretador Python está instalado.

Se você deseja que o script seja independente de onde o interpretador
Python mora, você pode usar o programa **env**. Quase todas as
variantes do Unix suportam o seguinte, assumindo que o interpretador
Python esteja em um diretório no "PATH" do usuário:

   #!/usr/bin/env python

Não faça isso para CGI scripts. A variável "PATH" para CGI scripts é
normalmente muito pequena, portanto, você precisa usar o caminho
completo do interpretador.

Occasionally, a user's environment is so full that the
**/usr/bin/env** program fails; or there's no env program at all.  In
that case, you can try the following hack (due to Alex Rezinsky):

   #! /bin/sh
   """:"
   exec python $0 ${1+"$@"}
   """

Uma pequena desvantagem é que isso define o script's __doc__ string.
Entretanto, você pode corrigir isso adicionando

   __doc__ = """...Whatever..."""


Existe um pacote de curses/termcap para Python?
-----------------------------------------------

For Unix variants: The standard Python source distribution comes with
a curses module in the Modules subdirectory, though it's not compiled
by default. (Note that this is not available in the Windows
distribution -- there is no curses module for Windows.)

The "curses" module supports basic curses features as well as many
additional functions from ncurses and SYSV curses such as colour,
alternative character set support, pads, and mouse support. This means
the module isn't compatible with operating systems that only have BSD
curses, but there don't seem to be any currently maintained OSes that
fall into this category.


Existe a função onexit() equivalente ao C no Python?
----------------------------------------------------

The "atexit" module provides a register function that is similar to
C's "onexit()".


Por que o meu manipulador de sinal não funciona?
------------------------------------------------

O maior problema é que o manipulador de sinal é declarado com uma
lista de argumentos incorretos. Isso é chamado como

   handler(signum, frame)

so it should be declared with two parameters:

   def handler(signum, frame):
       ...


Tarefas comuns
==============


Como testar um programa ou componente Python?
---------------------------------------------

A Python vem com dois frameworks de teste. O "doctest" busca por
exemplos nas docstrings de um módulo e os executa, comparando o
resultado com a saída esperada informada na docstring.

O módulo "unittest" é uma estrutura de teste mais sofisticada,
modelada nas estruturas de teste do Java e do Smalltalk.

To make testing easier, you should use good modular design in your
program. Your program should have almost all functionality
encapsulated in either functions or class methods -- and this
sometimes has the surprising and delightful effect of making the
program run faster (because local variable accesses are faster than
global accesses).  Furthermore the program should avoid depending on
mutating global variables, since this makes testing much more
difficult to do.

A lógica principal do seu programa pode tão simples quanto

   if __name__ == "__main__":
       main_logic()

no botão do módulo principal do seus programa.

Once your program is organized as a tractable collection of function
and class behaviours, you should write test functions that exercise
the behaviours.  A test suite that automates a sequence of tests can
be associated with each module. This sounds like a lot of work, but
since Python is so terse and flexible it's surprisingly easy.  You can
make coding much more pleasant and fun by writing your test functions
in parallel with the "production code", since this makes it easy to
find bugs and even design flaws earlier.

"Support modules" that are not intended to be the main module of a
program may include a self-test of the module.

   if __name__ == "__main__":
       self_test()

Mesmo quando as interfaces externas não estiverem disponíveis, os
programas que interagem com interfaces externas complexas podem ser
testados usando as interfaces "falsas" implementadas no Python.


Como faço para criar uma documentação de doc strings?
-----------------------------------------------------

The "pydoc" module can create HTML from the doc strings in your Python
source code.  An alternative for creating API documentation purely
from docstrings is epydoc.  Sphinx can also include docstring content.


Como faço para pressionar uma tecla de cada vez?
------------------------------------------------

Para variantes do Unix existem várias soluções. Apesar de ser um
módulo grande para aprender, é simples fazer isso usando o módulo
curses.


Threads
=======


Como faço para programar usando threads?
----------------------------------------

Be sure to use the "threading" module and not the "_thread" module.
The "threading" module builds convenient abstractions on top of the
low-level primitives provided by the "_thread" module.


Nenhuma de minhas threads parece funcionar, por quê?
----------------------------------------------------

Assim que a thread principal acaba, todas as threads são eliminadas.
Sua thread principal está sendo executada tão rápida que não está
dando tempo para realizar qualquer trabalho.

Uma solução simples é adicionar um tempo de espera no final do
programa até que todos os threads sejam concluídos:

   import threading, time

   def thread_task(name, n):
       for i in range(n):
           print(name, i)

   for i in range(10):
       T = threading.Thread(target=thread_task, args=(str(i), i))
       T.start()

   time.sleep(10)  # <---------------------------!

But now (on many platforms) the threads don't run in parallel, but
appear to run sequentially, one at a time!  The reason is that the OS
thread scheduler doesn't start a new thread until the previous thread
is blocked.

Uma solução simples é adicionar um pequeno tempo de espera no início
da função:

   def thread_task(name, n):
       time.sleep(0.001)  # <--------------------!
       for i in range(n):
           print(name, i)

   for i in range(10):
       T = threading.Thread(target=thread_task, args=(str(i), i))
       T.start()

   time.sleep(10)

Instead of trying to guess a good delay value for "time.sleep()", it's
better to use some kind of semaphore mechanism.  One idea is to use
the "queue" module to create a queue object, let each thread append a
token to the queue when it finishes, and let the main thread read as
many tokens from the queue as there are threads.


How do I parcel out work among a bunch of worker threads?
---------------------------------------------------------

The easiest way is to use the "concurrent.futures" module, especially
the "ThreadPoolExecutor" class.

Or, if you want fine control over the dispatching algorithm, you can
write your own logic manually.  Use the "queue" module to create a
queue containing a list of jobs.  The "Queue" class maintains a list
of objects and has a ".put(obj)" method that adds items to the queue
and a ".get()" method to return them.  The class will take care of the
locking necessary to ensure that each job is handed out exactly once.

Aqui está um exemplo simples:

   import threading, queue, time

   # The worker thread gets jobs off the queue.  When the queue is empty, it
   # assumes there will be no more work and exits.
   # (Realistically workers will run until terminated.)
   def worker():
       print('Running worker')
       time.sleep(0.1)
       while True:
           try:
               arg = q.get(block=False)
           except queue.Empty:
               print('Worker', threading.current_thread(), end=' ')
               print('queue empty')
               break
           else:
               print('Worker', threading.current_thread(), end=' ')
               print('running with argument', arg)
               time.sleep(0.5)

   # Create queue
   q = queue.Queue()

   # Start a pool of 5 workers
   for i in range(5):
       t = threading.Thread(target=worker, name='worker %i' % (i+1))
       t.start()

   # Begin adding work to the queue
   for i in range(50):
       q.put(i)

   # Give threads time to run
   print('Main thread sleeping')
   time.sleep(5)

Quando executado, isso produzirá a seguinte saída:

   Running worker
   Running worker
   Running worker
   Running worker
   Running worker
   Main thread sleeping
   Worker <Thread(worker 1, started 130283832797456)> running with argument 0
   Worker <Thread(worker 2, started 130283824404752)> running with argument 1
   Worker <Thread(worker 3, started 130283816012048)> running with argument 2
   Worker <Thread(worker 4, started 130283807619344)> running with argument 3
   Worker <Thread(worker 5, started 130283799226640)> running with argument 4
   Worker <Thread(worker 1, started 130283832797456)> running with argument 5
   ...

Consulte a documentação dos módulos para mais detalhes; a classe
"Queue" fornece uma interface com recursos.


Que tipos de variáveis globais mutáveis são seguras para thread?
----------------------------------------------------------------

A *global interpreter lock* (GIL) is used internally to ensure that
only one thread runs in the Python VM at a time.  In general, Python
offers to switch among threads only between bytecode instructions; how
frequently it switches can be set via "sys.setswitchinterval()".  Each
bytecode instruction and therefore all the C implementation code
reached from each instruction is therefore atomic from the point of
view of a Python program.

In theory, this means an exact accounting requires an exact
understanding of the PVM bytecode implementation.  In practice, it
means that operations on shared variables of built-in data types
(ints, lists, dicts, etc) that "look atomic" really are.

For example, the following operations are all atomic (L, L1, L2 are
lists, D, D1, D2 are dicts, x, y are objects, i, j are ints):

   L.append(x)
   L1.extend(L2)
   x = L[i]
   x = L.pop()
   L1[i:j] = L2
   L.sort()
   x = y
   x.field = y
   D[x] = y
   D1.update(D2)
   D.keys()

Esses não são:

   i = i+1
   L.append(L[-1])
   L[i] = L[j]
   D[x] = D[x] + 1

Operations that replace other objects may invoke those other objects'
"__del__()" method when their reference count reaches zero, and that
can affect things.  This is especially true for the mass updates to
dictionaries and lists.  When in doubt, use a mutex!


Não podemos remover o Bloqueio Global do interpretador?
-------------------------------------------------------

The *global interpreter lock* (GIL) is often seen as a hindrance to
Python's deployment on high-end multiprocessor server machines,
because a multi-threaded Python program effectively only uses one CPU,
due to the insistence that (almost) all Python code can only run while
the GIL is held.

Back in the days of Python 1.5, Greg Stein actually implemented a
comprehensive patch set (the "free threading" patches) that removed
the GIL and replaced it with fine-grained locking.  Adam Olsen
recently did a similar experiment in his python-safethread project.
Unfortunately, both experiments exhibited a sharp drop in single-
thread performance (at least 30% slower), due to the amount of fine-
grained locking necessary to compensate for the removal of the GIL.

This doesn't mean that you can't make good use of Python on multi-CPU
machines! You just have to be creative with dividing the work up
between multiple *processes* rather than multiple *threads*.  The
"ProcessPoolExecutor" class in the new "concurrent.futures" module
provides an easy way of doing so; the "multiprocessing" module
provides a lower-level API in case you want more control over
dispatching of tasks.

Judicious use of C extensions will also help; if you use a C extension
to perform a time-consuming task, the extension can release the GIL
while the thread of execution is in the C code and allow other threads
to get some work done.  Some standard library modules such as "zlib"
and "hashlib" already do this.

It has been suggested that the GIL should be a per-interpreter-state
lock rather than truly global; interpreters then wouldn't be able to
share objects. Unfortunately, this isn't likely to happen either.  It
would be a tremendous amount of work, because many object
implementations currently have global state. For example, small
integers and short strings are cached; these caches would have to be
moved to the interpreter state.  Other object types have their own
free list; these free lists would have to be moved to the interpreter
state. And so on.

And I doubt that it can even be done in finite time, because the same
problem exists for 3rd party extensions.  It is likely that 3rd party
extensions are being written at a faster rate than you can convert
them to store all their global state in the interpreter state.

E finalmente, uma vez que você tem vários interpretadores que não
compartilham seu estado, o que você ganhou ao executar processos
separados em cada interpretador?


Entrada e Saída
===============


Como faço para excluir um arquivo? (E outras perguntas sobre arquivos)
----------------------------------------------------------------------

Use "os.remove(filename)" ou "os.unlink(filename)";para documentação,
veja o módulo "os". As duas funções são idênticas; "unlink()" é
simplesmente o nome da chamada do sistema para esta função no Unix.

To remove a directory, use "os.rmdir()"; use "os.mkdir()" to create
one. "os.makedirs(path)" will create any intermediate directories in
"path" that don't exist. "os.removedirs(path)" will remove
intermediate directories as long as they're empty; if you want to
delete an entire directory tree and its contents, use
"shutil.rmtree()".

Para renomear um arquivos, use "os.rename(old_path, new_path)".

To truncate a file, open it using "f = open(filename, "rb+")", and use
"f.truncate(offset)"; offset defaults to the current seek position.
There's also "os.ftruncate(fd, offset)" for files opened with
"os.open()", where *fd* is the file descriptor (a small integer).

The "shutil" module also contains a number of functions to work on
files including "copyfile()", "copytree()", and "rmtree()".


Como eu copio um arquivo?
-------------------------

The "shutil" module contains a "copyfile()" function. Note that on
Windows NTFS volumes, it does not copy alternate data streams nor
resource forks on macOS HFS+ volumes, though both are now rarely used.
It also doesn't copy file permissions and metadata, though using
"shutil.copy2()" instead will preserve most (though not all) of it.


Como leio (ou escrevo) dados binários?
--------------------------------------

To read or write complex binary data formats, it's best to use the
"struct" module.  It allows you to take a string containing binary
data (usually numbers) and convert it to Python objects; and vice
versa.

For example, the following code reads two 2-byte integers and one
4-byte integer in big-endian format from a file:

   import struct

   with open(filename, "rb") as f:
       s = f.read(8)
       x, y, z = struct.unpack(">hhl", s)

The '>' in the format string forces big-endian data; the letter 'h'
reads one "short integer" (2 bytes), and 'l' reads one "long integer"
(4 bytes) from the string.

For data that is more regular (e.g. a homogeneous list of ints or
floats), you can also use the "array" module.

Nota:

  To read and write binary data, it is mandatory to open the file in
  binary mode (here, passing ""rb"" to "open()").  If you use ""r""
  instead (the default), the file will be open in text mode and
  "f.read()" will return "str" objects rather than "bytes" objects.


Por que não consigo usar os.read() em um encadeamento com os.popen()?
---------------------------------------------------------------------

"os.read()" is a low-level function which takes a file descriptor, a
small integer representing the opened file.  "os.popen()" creates a
high-level file object, the same type returned by the built-in
"open()" function. Thus, to read *n* bytes from a pipe *p* created
with "os.popen()", you need to use "p.read(n)".


Como acesso a porta serial (RS232)?
-----------------------------------

For Win32, OSX, Linux, BSD, Jython, IronPython:

   https://pypi.org/project/pyserial/

Para Unix, veja uma postagem da Usenet de Mitch Chapman:

   https://groups.google.com/groups?selm=34A04430.CF9@ohioee.com


Por que o sys.stdout (stdin, stderr) não fecha?
-----------------------------------------------

Python *file objects* are a high-level layer of abstraction on low-
level C file descriptors.

For most file objects you create in Python via the built-in "open()"
function, "f.close()" marks the Python file object as being closed
from Python's point of view, and also arranges to close the underlying
C file descriptor.  This also happens automatically in "f"'s
destructor, when "f" becomes garbage.

But stdin, stdout and stderr are treated specially by Python, because
of the special status also given to them by C.  Running
"sys.stdout.close()" marks the Python-level file object as being
closed, but does *not* close the associated C file descriptor.

To close the underlying C file descriptor for one of these three, you
should first be sure that's what you really want to do (e.g., you may
confuse extension modules trying to do I/O).  If it is, use
"os.close()":

   os.close(stdin.fileno())
   os.close(stdout.fileno())
   os.close(stderr.fileno())

Ou você pode usar as constantes numérias 0, 1 e 2, respectivamente.


Programação Rede / Internet
===========================


Quais ferramentas WWW existem no Python?
----------------------------------------

See the chapters titled Protocolos de Internet e Suporte and Manuseio
de Dados na Internet in the Library Reference Manual.  Python has many
modules that will help you build server-side and client-side web
systems.

Um resumo dos frameworks disponíveis é disponibilizado por Paul Boddie
em https://wiki.python.org/moin/WebProgramming.

Cameron Laird maintains a useful set of pages about Python web
technologies at https://web.archive.org/web/20210224183619/http://pha
seit.net/claird/comp.lang.python/web_python.


Como faço para imitar a submissão de formulário CGI (METHOD=POST)?
------------------------------------------------------------------

Gostaria de recuperar páginas da WEB resultantes de um formulário
POST. Existe algum código que consigo fazer isso facilmente?

Yes. Here's a simple example that uses "urllib.request":

   #!/usr/local/bin/python

   import urllib.request

   # build the query string
   qs = "First=Josephine&MI=Q&Last=Public"

   # connect and send the server a path
   req = urllib.request.urlopen('http://www.some-server.out-there'
                                '/cgi-bin/some-cgi-script', data=qs)
   with req:
       msg, hdrs = req.read(), req.info()

Note that in general for percent-encoded POST operations, query
strings must be quoted using "urllib.parse.urlencode()".  For example,
to send "name=Guy Steele, Jr.":

   >>> import urllib.parse
   >>> urllib.parse.urlencode({'name': 'Guy Steele, Jr.'})
   'name=Guy+Steele%2C+Jr.'

Ver também:

  Como Buscar Recursos Da Internet Usando O Pacote urllib para mais
  exemplos.


Qual módulo devo usar para ajudar na geração do HTML?
-----------------------------------------------------

Você pode encontrar uma coleção de links úteis na página wiki
WebProgramming.


Como envio um e-mail de um script Python?
-----------------------------------------

Use a biblioteca padrão do módulo "smtplib".

Aqui está um remetente de e-mail interativo muito simples. Este método
funcionará em qualquer host que suporte o protocolo SMTP.

   import sys, smtplib

   fromaddr = input("From: ")
   toaddrs  = input("To: ").split(',')
   print("Enter message, end with ^D:")
   msg = ''
   while True:
       line = sys.stdin.readline()
       if not line:
           break
       msg += line

   # The actual mail send
   server = smtplib.SMTP('localhost')
   server.sendmail(fromaddr, toaddrs, msg)
   server.quit()

A Unix-only alternative uses sendmail.  The location of the sendmail
program varies between systems; sometimes it is "/usr/lib/sendmail",
sometimes "/usr/sbin/sendmail".  The sendmail manual page will help
you out.  Here's some sample code:

   import os

   SENDMAIL = "/usr/sbin/sendmail"  # sendmail location
   p = os.popen("%s -t -i" % SENDMAIL, "w")
   p.write("To: receiver@example.com\n")
   p.write("Subject: test\n")
   p.write("\n")  # blank line separating headers from body
   p.write("Some text\n")
   p.write("some more text\n")
   sts = p.close()
   if sts != 0:
       print("Sendmail exit status", sts)


Como evito o bloqueio no método connect() de um soquete?
--------------------------------------------------------

O módulo "select" é normalmente usado para ajudar com E/S assíncrona
nos soquetes.

To prevent the TCP connect from blocking, you can set the socket to
non-blocking mode.  Then when you do the "connect()", you will either
connect immediately (unlikely) or get an exception that contains the
error number as ".errno". "errno.EINPROGRESS" indicates that the
connection is in progress, but hasn't finished yet.  Different OSes
will return different values, so you're going to have to check what's
returned on your system.

You can use the "connect_ex()" method to avoid creating an exception.
It will just return the errno value. To poll, you can call
"connect_ex()" again later -- "0" or "errno.EISCONN" indicate that
you're connected -- or you can pass this socket to "select.select()"
to check if it's writable.

Nota:

  The "asyncio" module provides a general purpose single-threaded and
  concurrent asynchronous library, which can be used for writing non-
  blocking network code. The third-party Twisted library is a popular
  and feature-rich alternative.


Base de Dados
=============


Existem interfaces para banco de dados em Python?
-------------------------------------------------

Sim.

Interfaces to disk-based hashes such as "DBM" and "GDBM" are also
included with standard Python.  There is also the "sqlite3" module,
which provides a lightweight disk-based relational database.

Suporte para a maioria dos bancos de dados relacionais está
disponível. Para mais detalhes, veja a página wiki DatabaseProgramming
para detalhes.


Como você implementa objetos persistentes no Python?
----------------------------------------------------

The "pickle" library module solves this in a very general way (though
you still can't store things like open files, sockets or windows), and
the "shelve" library module uses pickle and (g)dbm to create
persistent mappings containing arbitrary Python objects.


Matemáticos e Numéricos
=======================


Como gero número aleatórios no Python?
--------------------------------------

O módulo padrão "random" implementa um gerador de números aleatórios.
O uso é simples:

   import random
   random.random()

Isso retorna um número flutuante aleatório no intervalo [0, 1).

Existem também muitos outros geradores aleatórios neste módulo, como:

* "randrange(a, b)" escolhe um número inteiro no intervalo entre [a,
  b).

* "uniform(a, b)" escolhe um número float no intervalo [a, b).

* "normalvariate(mean, sdev)" samples the normal (Gaussian)
  distribution.

Algumas funções de nível elevado operam diretamente em sequencia,
como:

* "choice(S)" chooses a random element from a given sequence.

* "shuffle(L)" shuffles a list in-place, i.e. permutes it randomly.

Existe também uma classe "Random" que você pode instanciar para criar
vários geradores de números aleatórios independentes.
