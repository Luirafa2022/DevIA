Conteúdo da Documentação Python
*******************************

* O que há de novo no Python

  * O que há de novo no Python 3.12

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * PEP 695: Sintaxe do parâmetro de tipo

      * PEP 701: Formalização sintática de f-strings

      * PEP 684: Um GIL por interpretador

      * PEP 669: Monitoramento de baixo impacto para CPython

      * PEP 688: Tornando o protocolo de buffer acessível no Python

      * PEP 709: Fazendo inline de compreensão

      * Mensagens de erro melhoradas

    * Novos recursos relacionados a dicas de tipo

      * PEP 692: Usando "TypedDict" para tipagem mais precisa de
        "**kwargs"

      * PEP 698: Substitui decorador para tipagem estática

    * Outras mudanças na linguagem

    * Novos módulos

    * Módulos melhorados

      * array

      * asyncio

      * calendar

      * csv

      * dis

      * fractions

      * importlib.resources

      * inspect

      * itertools

      * math

      * os

      * os.path

      * pathlib

      * pdb

      * random

      * shutil

      * sqlite3

      * statistics

      * sys

      * tempfile

      * threading

      * tkinter

      * tokenize

      * types

      * typing

      * unicodedata

      * unittest

      * uuid

    * Otimizações

    * Alterações de bytecode do CPython

    * Ferramentas e daemons

    * Descontinuados

      * Pending Removal in Python 3.13

      * Pending Removal in Python 3.14

      * Pending Removal in Python 3.15

      * Pending Removal in Future Versions

    * Removidos

      * asynchat and asyncore

      * configparser

      * distutils

      * ensurepip

      * enum

      * ftplib

      * gzip

      * hashlib

      * importlib

      * imp

      * io

      * locale

      * smtpd

      * sqlite3

      * ssl

      * unittest

      * webbrowser

      * xml.etree.ElementTree

      * zipimport

      * Others

    * Porting to Python 3.12

      * Alterações na API Python

    * Alterações de compilação

    * Alterações na API C

      * Novas funcionalidades

      * Porting to Python 3.12

      * Descontinuados

        * Pending Removal in Python 3.14

        * Pending Removal in Python 3.15

        * Pending Removal in Future Versions

      * Removidos

  * O que há de novo no Python 3.11

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * PEP 657: Localizações de erros refinadas em tracebacks

      * PEP 654: Grupos de exceção e "except*"

      * PEP 678: Exceções podem ser enriquecidas com notas

      * Melhorias no inicializador "py.exe" do Windows

    * Novos recursos relacionados a dicas de tipo

      * PEP 646: Genéricos variádicos

      * PEP 655: Marcando itens "TypedDict" individuais como
        obrigatórios ou não obrigatórios

      * PEP 673: Tipo "Self"

      * PEP 675: Tipo de string literal arbitrário

      * PEP 681: Transformações de classe de dados

      * PEP 563 pode não ser o futuro

    * Outras mudanças na linguagem

    * Outras mudanças na implementação do CPython

    * Novos módulos

    * Módulos melhorados

      * asyncio

      * contextlib

      * dataclasses

      * datetime

      * enum

      * fcntl

      * fractions

      * functools

      * hashlib

      * IDLE e idlelib

      * inspect

      * locale

      * logging

      * math

      * operator

      * os

      * pathlib

      * re

      * shutil

      * socket

      * sqlite3

      * string

      * sys

      * sysconfig

      * tempfile

      * threading

      * time

      * tkinter

      * traceback

      * typing

      * unicodedata

      * unittest

      * venv

      * warnings

      * zipfile

    * Otimizações

    * CPython mais rápido

      * Inicialização mais rápida

        * Importações congeladas/objetos de código estático

      * Tempo de execução mais rápido

        * Quadros Python menos custosos e mais preguiçosos

        * Chamadas de função Python em linha

        * PEP 659: Interpretador adaptativo especializado

      * Diversos

      * FAQ

        * Como devo escrever meu código para utilizar esses
          aceleradores?

        * O CPython 3.11 usará mais memória?

        * Não vejo nenhuma aceleração em minha carga de trabalho. Por
          que?

        * Existe um compilador JIT?

      * Sobre

    * Alterações de bytecode do CPython

      * Novos opcodes

      * Opcodes substituídos

      * Opcodes alterados/removidos

    * Descontinuados

      * Linguagem/Embutidos

      * Módulos

      * Biblioteca Padrão

    * Pendente remoção no Python 3.12

    * Removidos

    * Portando para Python 3.11

    * Alterações de compilação

    * Alterações na API C

      * Novas funcionalidades

      * Portando para Python 3.11

      * Descontinuados

      * Pendente remoção no Python 3.12

      * Removidos

    * Notable changes in 3.11.4

      * tarfile

    * Notable changes in 3.11.5

      * OpenSSL

  * O que há de novo no Python 3.10

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * Gerenciadores de contexto entre parênteses

      * Melhores mensagens de erro

        * SyntaxErrors

        * IndentationErrors

        * AttributeErrors

        * NameErrors

      * PEP 626: Números de linha precisos para depuração e outras
        ferramentas

      * PEP 634: Correspondência de padrão estrutural

        * Sintaxe e operações

        * Abordagem declarativa

        * Padrão simples: corresponder a um literal

          * Comportamento sem o curinga

        * Padrões com uma literal e variável

        * Padrões e classes

          * Padrões com parâmetros posicionais

        * Padrões aninhados

        * Padrões complexos e o curinga

        * Guarda

        * Outros recursos-chave

      * "EncodingWarning" opcional e opção "encoding="locale""

    * Novos recursos relacionados a dicas de tipo

      * PEP 604: Operador de união de novo tipo

      * PEP 612: Variáveis de especificação de parâmetros

      * PEP 613: TypeAlias

      * PEP 647: Guardas de Tipo Definidas Pelo Usuário

    * Outras mudanças na linguagem

    * Novos módulos

    * Módulos melhorados

      * asyncio

      * argparse

      * array

      * asynchat, asyncore, smtpd

      * base64

      * bdb

      * bisect

      * codecs

      * collections.abc

      * contextlib

      * curses

      * dataclasses

        * __slots__

        * Campos somente-nomeados

      * distutils

      * doctest

      * encodings

      * enum

      * fileinput

      * faulthandler

      * gc

      * glob

      * hashlib

      * hmac

      * IDLE e idlelib

      * importlib.metadata

      * inspect

      * itertools

      * linecache

      * os

      * os.path

      * pathlib

      * platform

      * pprint

      * py_compile

      * pyclbr

      * shelve

      * statistics

      * site

      * socket

      * ssl

      * sqlite3

      * sys

      * _thread

      * threading

      * traceback

      * types

      * typing

      * unittest

      * urllib.parse

      * xml

      * zipimport

    * Otimizações

    * Descontinuados

    * Removidos

    * Portando para Python 3.10

      * Alterações na sintaxe Python

      * Alterações na API Python

      * Alterações na API C

    * Alterações de bytecode do CPython

    * Alterações de compilação

    * Alterações na API C

      * PEP 652: Mantendo a ABI estável

      * Novas funcionalidades

      * Portando para Python 3.10

      * Descontinuados

      * Removidos

    * Recursos de segurança notáveis no 3.10.7

    * Recursos de segurança notáveis no 3.10.8

    * Notable changes in 3.10.12

      * tarfile

  * O que há de novo no Python 3.9

    * Resumo -- Destaques da versão

    * Você deve verificar DeprecationWarning no seu código

    * Novas funcionalidades

      * Operadores de mesclagem & atualização de dicionário

      * Novos métodos de strings para remover prefixos e sufixos

      * Type hinting genéricos nas coleções padrão

      * Novo analisador sintático

    * Outras mudanças na linguagem

    * Novos módulos

      * zoneinfo

      * graphlib

    * Módulos melhorados

      * ast

      * asyncio

      * compileall

      * concurrent.futures

      * curses

      * datetime

      * distutils

      * fcntl

      * ftplib

      * gc

      * hashlib

      * http

      * IDLE e idlelib

      * imaplib

      * importlib

      * inspect

      * ipaddress

      * math

      * multiprocessing

      * nntplib

      * os

      * pathlib

      * pdb

      * poplib

      * pprint

      * pydoc

      * random

      * signal

      * smtplib

      * socket

      * time

      * sys

      * tracemalloc

      * typing

      * unicodedata

      * venv

      * xml

    * Otimizações

    * Descontinuados

    * Removidos

    * Portando para Python 3.9

      * Alterações na API Python

      * Alterações na API C

      * Alterações de bytecode do CPython

    * Alterações de compilação

    * Alterações na API C

      * Novas funcionalidades

      * Portando para Python 3.9

      * Removidos

    * Alterações notáveis no Python 3.9.1

      * typing

      * Suporte a macOS 11.0 (Big Sur) e Apple Silicon Mac

    * Alterações notáveis no Python 3.9.2

      * collections.abc

      * urllib.parse

    * Alterações notáveis no Python 3.9.3

    * Alterações notáveis no Python 3.9.5

      * urllib.parse

    * Notable security feature in 3.9.14

    * Notable changes in 3.9.17

      * tarfile

  * O que há de novo no Python 3.8

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * Expressões de atribuição

      * Parâmetros apenas posicionais

      * Cache do sistema de arquivos paralelo para arquivos de
        bytecode compilados

      * A compilação de depuração usa a mesma ABI da compilação de
        lançamento

      * O suporte a f-strings "=" para expressões de auto-documentação
        e depuração

      * PEP 578: Ganchos de auditoria em tempo de execução Python

      * PEP 587: Configuração de Inicialização do Python

      * PEP 590: Vectorcall: um protocolo de chamada rápida para
        CPython

      * Protocolo de Pickle 5 com buffers de dados fora da banda

    * Outras mudanças na linguagem

    * Novos módulos

    * Módulos melhorados

      * ast

      * asyncio

      * builtins

      * collections

      * cProfile

      * csv

      * curses

      * ctypes

      * datetime

      * functools

      * gc

      * gettext

      * gzip

      * IDLE e idlelib

      * inspect

      * io

      * itertools

      * json.tool

      * logging

      * math

      * mmap

      * multiprocessing

      * os

      * os.path

      * pathlib

      * pickle

      * plistlib

      * pprint

      * py_compile

      * shlex

      * shutil

      * socket

      * ssl

      * statistics

      * sys

      * tarfile

      * threading

      * tokenize

      * tkinter

      * time

      * typing

      * unicodedata

      * unittest

      * venv

      * weakref

      * xml

      * xmlrpc

    * Otimizações

    * Alterações a compilações e API C

    * Descontinuados

    * Remoção de APIs e recursos

    * Portando para o Python 3.8

      * Alterações no comportamento do Python

      * Alterações na API Python

      * Alterações na API C

      * Alterações de bytecode do CPython

      * Ferramentas e daemons

    * Alterações notáveis no Python 3.8.1

    * Alterações notáveis no Python 3.8.2

    * Alterações notáveis no Python 3.8.3

    * Alterações notáveis no Python 3.8.8

    * Notable changes in Python 3.8.9

    * Notable changes in Python 3.8.10

      * Suporte a macOS 11.0 (Big Sur) e Apple Silicon Mac

    * Notable changes in Python 3.8.10

      * urllib.parse

    * Alterações notáveis no Python 3.8.12

      * Alterações na API Python

    * Notable security feature in 3.8.14

    * Notable changes in 3.8.17

      * tarfile

  * O que há de novo no Python 3.7

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * PEP 563: Avaliação Postergada de Anotações

      * PEP 538: Coerção de localidade C legada

      * PEP 540: Modo de tempo de execução  UTF-8 forçado

      * PEP 553: "breakpoint()" embutida

      * PEP 539: Nova API C para armazenamento local de thread

      * PEP 562: Personalização de acesso aos atributos do módulo

      * PEP 564: Novas funções de tempo com resolução de nanossegundos

      * PEP 565: Mostra DeprecationWarning em "__main__"

      * PEP 560: Suporte básico para módulo "typing" e tipos genéricos

      * PEP 552: Arquivos .pyc baseados em hash

      * PEP 545: Python Documentation Translations

      * Python Development Mode (-X dev)

    * Outras mudanças na linguagem

    * Novos módulos

      * contextvars

      * dataclasses

      * importlib.resources

    * Módulos melhorados

      * argparse

      * asyncio

      * binascii

      * calendar

      * collections

      * compileall

      * concurrent.futures

      * contextlib

      * cProfile

      * crypt

      * datetime

      * dbm

      * decimal

      * dis

      * distutils

      * enum

      * functools

      * gc

      * hmac

      * http.client

      * http.server

      * idlelib and IDLE

      * importlib

      * io

      * ipaddress

      * itertools

      * locale

      * logging

      * math

      * mimetypes

      * msilib

      * multiprocessing

      * os

      * pathlib

      * pdb

      * py_compile

      * pydoc

      * queue

      * re

      * signal

      * socket

      * socketserver

      * sqlite3

      * ssl

      * string

      * subprocess

      * sys

      * time

      * tkinter

      * tracemalloc

      * types

      * unicodedata

      * unittest

      * unittest.mock

      * urllib.parse

      * uu

      * uuid

      * avisos

      * xml

      * xml.etree

      * xmlrpc.server

      * zipapp

      * zipfile

    * Alterações na API C

    * Alterações de compilação

    * Otimizações

    * Outras mudanças na implementação do CPython

    * Comportamento do Python descontinuado

    * Deprecated Python modules, functions and methods

      * aifc

      * asyncio

      * collections

      * dbm

      * enum

      * gettext

      * importlib

      * locale

      * macpath

      * threading

      * socket

      * ssl

      * sunau

      * sys

      * wave

    * Deprecated functions and types of the C API

    * Platform Support Removals

    * Remoção de APIs e recursos

    * Module Removals

    * Windows-only Changes

    * Porting to Python 3.7

      * Changes in Python Behavior

      * Alterações na API Python

      * Alterações na API C

      * Alterações de bytecode do CPython

      * Windows-only Changes

      * Other CPython implementation changes

    * Notable changes in Python 3.7.1

    * Notable changes in Python 3.7.2

    * Notable changes in Python 3.7.6

    * Notable changes in Python 3.7.10

    * Notable changes in Python 3.7.11

    * Notable security feature in 3.7.14

  * What's New In Python 3.6

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * PEP 498: Formatted string literals

      * PEP 526: Syntax for variable annotations

      * PEP 515: Underscores in Numeric Literals

      * PEP 525: Asynchronous Generators

      * PEP 530: Asynchronous Comprehensions

      * PEP 487: Simpler customization of class creation

      * PEP 487: Descriptor Protocol Enhancements

      * PEP 519: Adding a file system path protocol

      * PEP 495: Local Time Disambiguation

      * PEP 529: Change Windows filesystem encoding to UTF-8

      * PEP 528: Change Windows console encoding to UTF-8

      * PEP 520: Preserving Class Attribute Definition Order

      * PEP 468: Preserving Keyword Argument Order

      * New *dict* implementation

      * PEP 523: Adding a frame evaluation API to CPython

      * PYTHONMALLOC environment variable

      * DTrace and SystemTap probing support

    * Outras mudanças na linguagem

    * Novos módulos

      * segredos

    * Módulos melhorados

      * array

      * ast

      * asyncio

      * binascii

      * cmath

      * collections

      * concurrent.futures

      * contextlib

      * datetime

      * decimal

      * distutils

      * email

      * encodings

      * enum

      * faulthandler

      * fileinput

      * hashlib

      * http.client

      * idlelib and IDLE

      * importlib

      * inspect

      * json

      * logging

      * math

      * multiprocessing

      * os

      * pathlib

      * pdb

      * pickle

      * pickletools

      * pydoc

      * random

      * re

      * readline

      * rlcompleter

      * shlex

      * site

      * sqlite3

      * socket

      * socketserver

      * ssl

      * statistics

      * struct

      * subprocess

      * sys

      * telnetlib

      * time

      * timeit

      * tkinter

      * traceback

      * tracemalloc

      * typing

      * unicodedata

      * unittest.mock

      * urllib.request

      * urllib.robotparser

      * venv

      * avisos

      * winreg

      * winsound

      * xmlrpc.client

      * zipfile

      * zlib

    * Otimizações

    * Alterações a compilações e API C

    * Other Improvements

    * Descontinuados

      * New Keywords

      * Deprecated Python behavior

      * Deprecated Python modules, functions and methods

        * asynchat

        * asyncore

        * dbm

        * distutils

        * grp

        * importlib

        * os

        * re

        * ssl

        * tkinter

        * venv

      * xml

      * Deprecated functions and types of the C API

      * Deprecated Build Options

    * Removidos

      * Remoção de APIs e recursos

    * Porting to Python 3.6

      * Changes in 'python' Command Behavior

      * Alterações na API Python

      * Alterações na API C

      * Alterações de bytecode do CPython

    * Notable changes in Python 3.6.2

      * New "make regen-all" build target

      * Removal of "make touch" build target

    * Notable changes in Python 3.6.4

    * Notable changes in Python 3.6.5

    * Notable changes in Python 3.6.7

    * Notable changes in Python 3.6.10

    * Notable changes in Python 3.6.13

    * Notable changes in Python 3.6.14

  * O que há de novo no Python 3.5

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * PEP 492 - Coroutines with async and await syntax

      * PEP 465 - A dedicated infix operator for matrix multiplication

      * PEP 448 - Additional Unpacking Generalizations

      * PEP 461 - percent formatting support for bytes and bytearray

      * PEP 484 - Type Hints

      * PEP 471 - os.scandir() function -- a better and faster
        directory iterator

      * PEP 475: Retry system calls failing with EINTR

      * PEP 479: Change StopIteration handling inside generators

      * PEP 485: A function for testing approximate equality

      * PEP 486: Make the Python Launcher aware of virtual
        environments

      * PEP 488: Elimination of PYO files

      * PEP 489: Multi-phase extension module initialization

    * Outras mudanças na linguagem

    * Novos módulos

      * typing

      * zipapp

    * Módulos melhorados

      * argparse

      * asyncio

      * bz2

      * cgi

      * cmath

      * código

      * collections

      * collections.abc

      * compileall

      * concurrent.futures

      * configparser

      * contextlib

      * csv

      * curses

      * dbm

      * difflib

      * distutils

      * doctest

      * email

      * enum

      * faulthandler

      * functools

      * glob

      * gzip

      * heapq

      * http

      * http.client

      * idlelib and IDLE

      * imaplib

      * imghdr

      * importlib

      * inspect

      * io

      * ipaddress

      * json

      * linecache

      * locale

      * logging

      * lzma

      * math

      * multiprocessing

      * operador

      * os

      * pathlib

      * pickle

      * poplib

      * re

      * readline

      * Seletores

      * shutil

      * signal

      * smtpd

      * smtplib

      * sndhdr

      * socket

      * ssl

        * Memory BIO Support

        * Application-Layer Protocol Negotiation Support

        * Other Changes

      * sqlite3

      * subprocess

      * sys

      * sysconfig

      * tarfile

      * threading

      * time

      * timeit

      * tkinter

      * traceback

      * types

      * unicodedata

      * unittest

      * unittest.mock

      * urllib

      * wsgiref

      * xmlrpc

      * xml.sax

      * zipfile

    * Other module-level changes

    * Otimizações

    * Alterações a compilações e API C

    * Descontinuados

      * New Keywords

      * Comportamento do Python descontinuado

      * Unsupported Operating Systems

      * Deprecated Python modules, functions and methods

    * Removidos

      * Remoção de APIs e recursos

    * Porting to Python 3.5

      * Alterações no comportamento do Python

      * Alterações na API Python

      * Alterações na API C

    * Notable changes in Python 3.5.4

      * New "make regen-all" build target

      * Removal of "make touch" build target

  * O que há de novo no Python 3.4

    * Resumo -- Destaques da versão

    * Novas funcionalidades

      * PEP 453: Explicit Bootstrapping of PIP in Python Installations

        * Bootstrapping pip By Default

        * Mudanças na documentação

      * PEP 446: Newly Created File Descriptors Are Non-Inheritable

      * Melhorias no manuseio de Codecs

      * PEP 451: A ModuleSpec Type for the Import System

      * Outras mudanças na linguagem

    * Novos módulos

      * asyncio

      * ensurepip

      * enum

      * pathlib

      * selectors

      * statistics

      * tracemalloc

    * Módulos melhorados

      * abc

      * aifc

      * argparse

      * audioop

      * base64

      * collections

      * colorsys

      * contextlib

      * dbm

      * dis

      * doctest

      * email

      * filecmp

      * functools

      * gc

      * glob

      * hashlib

      * hmac

      * html

      * http

      * idlelib e IDLE

      * importlib

      * inspect

      * ipaddress

      * logging

      * marshal

      * mmap

      * multiprocessing

      * operador

      * os

      * pdb

      * pickle

      * plistlib

      * poplib

      * pprint

      * pty

      * pydoc

      * re

      * resource

      * select

      * shelve

      * shutil

      * smtpd

      * smtplib

      * socket

      * sqlite3

      * ssl

      * stat

      * struct

      * subprocess

      * sunau

      * sys

      * tarfile

      * textwrap

      * threading

      * traceback

      * types

      * urllib

      * unittest

      * venv

      * wave

      * weakref

      * xml.etree

      * zipfile

    * CPython Implementation Changes

      * PEP 445: Customization of CPython Memory Allocators

      * PEP 442: Safe Object Finalization

      * PEP 456: Secure and Interchangeable Hash Algorithm

      * PEP 436: Argument Clinic

      * Other Alterações a compilações e API C

      * Other Improvements

      * Otimizações Relevantes

    * Descontinuados

      * Deprecations in the Python API

      * Deprecated Features

    * Removidos

      * Operating Systems No Longer Supported

      * Remoção de APIs e recursos

      * Code Cleanups

    * Porting to Python 3.4

      * Changes in 'python' Command Behavior

      * Alterações na API Python

      * Alterações na API C

    * Alterado em 3.4.3

      * PEP 476: Ativando a verificação de certificados por padrão
        para clientes stdlib http

  * O que há de novo no Python 3.3

    * Resumo -- Destaques da versão

    * PEP 405: Virtual Environments

    * PEP 420: Implicit Namespace Packages

    * PEP 3118: New memoryview implementation and buffer protocol
      documentation

      * Recursos

      * API changes

    * PEP 393: Flexible String Representation

      * Funcionalidade

      * Performance and resource usage

    * PEP 397: Python Launcher for Windows

    * PEP 3151: Reworking the OS and IO exception hierarchy

    * PEP 380: Syntax for Delegating to a Subgenerator

    * PEP 409: Suppressing exception context

    * PEP 414: Explicit Unicode literals

    * PEP 3155: Qualified name for classes and functions

    * PEP 412: Key-Sharing Dictionary

    * PEP 362: Function Signature Object

    * PEP 421: Adding sys.implementation

      * SimpleNamespace

    * Using importlib as the Implementation of Import

      * New APIs

      * Visible Changes

    * Outras mudanças na linguagem

    * A Finer-Grained Import Lock

    * Builtin functions and types

    * Novos módulos

      * faulthandler

      * ipaddress

      * lzma

    * Módulos melhorados

      * abc

      * array

      * base64

      * binascii

      * bz2

      * codecs

      * collections

      * contextlib

      * crypt

      * curses

      * datetime

      * decimal

        * Recursos

        * API changes

      * email

        * Policy Framework

        * Provisional Policy with New Header API

        * Other API Changes

      * ftplib

      * functools

      * gc

      * hmac

      * http

      * html

      * imaplib

      * inspect

      * io

      * itertools

      * logging

      * math

      * mmap

      * multiprocessing

      * nntplib

      * os

      * pdb

      * pickle

      * pydoc

      * re

      * sched

      * select

      * shlex

      * shutil

      * signal

      * smtpd

      * smtplib

      * socket

      * socketserver

      * sqlite3

      * ssl

      * stat

      * struct

      * subprocess

      * sys

      * tarfile

      * tempfile

      * textwrap

      * threading

      * time

      * types

      * unittest

      * urllib

      * webbrowser

      * xml.etree.ElementTree

      * zlib

    * Otimizações

    * Alterações a compilações e API C

    * Descontinuados

      * Unsupported Operating Systems

      * Deprecated Python modules, functions and methods

      * Deprecated functions and types of the C API

      * Deprecated features

    * Porting to Python 3.3

      * Porting Python code

      * Porting C code

      * Building C extensions

      * Command Line Switch Changes

  * O que há de novo no Python 3.2

    * PEP 384: Defining a Stable ABI

    * PEP 389: Argparse Command Line Parsing Module

    * PEP 391:  Dictionary Based Configuration for Logging

    * PEP 3148:  The "concurrent.futures" module

    * PEP 3147:  PYC Repository Directories

    * PEP 3149: ABI Version Tagged .so Files

    * PEP 3333: Python Web Server Gateway Interface v1.0.1

    * Outras mudanças na linguagem

    * New, Improved, and Deprecated Modules

      * email

      * elementtree

      * functools

      * itertools

      * collections

      * threading

      * datetime and time

      * math

      * abc

      * io

      * reprlib

      * logging

      * csv

      * contextlib

      * decimal and fractions

      * ftp

      * popen

      * select

      * gzip and zipfile

      * tarfile

      * hashlib

      * ast

      * os

      * shutil

      * sqlite3

      * html

      * socket

      * ssl

      * nntp

      * certificates

      * imaplib

      * http.client

      * unittest

      * random

      * poplib

      * asyncore

      * tempfile

      * inspect

      * pydoc

      * dis

      * dbm

      * ctypes

      * site

      * sysconfig

      * pdb

      * configparser

      * urllib.parse

      * mailbox

      * turtledemo

    * Multi-threading

    * Otimizações

    * Unicode

    * Codecs

    * Documentação

    * IDLE

    * Code Repository

    * Alterações a compilações e API C

    * Porting to Python 3.2

  * O que há de novo no Python 3.1

    * PEP 372: Dicionários ordenados

    * PEP 378: Especificador de formato para separador de milhares

    * Outras mudanças na linguagem

    * New, Improved, and Deprecated Modules

    * Otimizações

    * IDLE

    * Alterações a compilações e API C

    * Porting to Python 3.1

  * What's New In Python 3.0

    * Common Stumbling Blocks

      * Print Is A Function

      * Views And Iterators Instead Of Lists

      * Ordering Comparisons

      * Integers

      * Text Vs. Data Instead Of Unicode Vs. 8-bit

    * Overview Of Syntax Changes

      * New Syntax

      * Changed Syntax

      * Removed Syntax

    * Changes Already Present In Python 2.6

    * Library Changes

    * **PEP 3101**: A New Approach To String Formatting

    * Changes To Exceptions

    * Miscellaneous Other Changes

      * Operators And Special Methods

      * Builtins

    * Build and C API Changes

    * Performance

    * Porting To Python 3.0

  * O que há de novo no Python 2.7

    * O futuro para o Python 2.x

    * Mudanças no tratamento de avisos de descontinuação

    * Recursos do Python 3.1

    * PEP 372: Adicionando um dicionário ordenado a coleções

    * PEP 378: Especificador de formato para separador de milhares

    * PEP 389: O módulo argparse para analisar linhas de comando

    * PEP 391: Configuração baseada em dicionário para logging

    * PEP 3106: Views de dicionário

    * PEP 3137: O objeto memoryview

    * Outras mudanças na linguagem

      * Alterações do interpretador

      * Otimizações

    * Módulos Novos ou Aprimorados

      * New module: importlib

      * New module: sysconfig

      * ttk: Themed Widgets for Tk

      * Updated module: unittest

      * Updated module: ElementTree 1.3

    * Alterações a compilações e API C

      * Capsules

      * Port-Specific Changes: Windows

      * Port-Specific Changes: Mac OS X

      * Port-Specific Changes: FreeBSD

    * Other Changes and Fixes

    * Porting to Python 2.7

    * New Features Added to Python 2.7 Maintenance Releases

      * Two new environment variables for debug mode

      * PEP 434: IDLE Enhancement Exception for All Branches

      * PEP 466: Network Security Enhancements for Python 2.7

      * PEP 477: Backport ensurepip (PEP 453) to Python 2.7

        * Bootstrapping pip By Default

        * Mudanças na documentação

      * PEP 476: Ativando a verificação de certificados por padrão
        para clientes stdlib http

      * PEP 493: HTTPS verification migration tools for Python 2.7

      * New "make regen-all" build target

      * Removal of "make touch" build target

    * Reconhecimentos

  * O que há de novo no Python 2.6

    * Python 3.0

    * Changes to the Development Process

      * New Issue Tracker: Roundup

      * New Documentation Format: reStructuredText Using Sphinx

    * PEP 343: The 'with' statement

      * Writing Context Managers

      * The contextlib module

    * PEP 366: Explicit Relative Imports From a Main Module

    * PEP 370: Per-user "site-packages" Directory

    * PEP 371: The "multiprocessing" Package

    * PEP 3101: Advanced String Formatting

    * PEP 3105: "print" As a Function

    * PEP 3110: Exception-Handling Changes

    * PEP 3112: Byte Literals

    * PEP 3116: New I/O Library

    * PEP 3118: Revised Buffer Protocol

    * PEP 3119: Abstract Base Classes

    * PEP 3127: Integer Literal Support and Syntax

    * PEP 3129: Class Decorators

    * PEP 3141: A Type Hierarchy for Numbers

      * The "fractions" Module

    * Outras mudanças na linguagem

      * Otimizações

      * Alterações do interpretador

    * Módulos Novos ou Aprimorados

      * The "ast" module

      * The "future_builtins" module

      * The "json" module: JavaScript Object Notation

      * The "plistlib" module: A Property-List Parser

      * ctypes Enhancements

      * Improved SSL Support

    * Deprecations and Removals

    * Alterações a compilações e API C

      * Port-Specific Changes: Windows

      * Port-Specific Changes: Mac OS X

      * Port-Specific Changes: IRIX

    * Porting to Python 2.6

    * Reconhecimentos

  * O que há de novo no Python 2.5

    * PEP 308: Conditional Expressions

    * PEP 309: Partial Function Application

    * PEP 314: Metadata for Python Software Packages v1.1

    * PEP 328: Absolute and Relative Imports

    * PEP 338: Executing Modules as Scripts

    * PEP 341: Unified try/except/finally

    * PEP 342: New Generator Features

    * PEP 343: The 'with' statement

      * Writing Context Managers

      * The contextlib module

    * PEP 352: Exceptions as New-Style Classes

    * PEP 353: Using ssize_t as the index type

    * PEP 357: The '__index__' method

    * Outras mudanças na linguagem

      * Interactive Interpreter Changes

      * Otimizações

    * New, Improved, and Removed Modules

      * The ctypes package

      * The ElementTree package

      * The hashlib package

      * The sqlite3 package

      * The wsgiref package

    * Alterações a compilações e API C

      * Port-Specific Changes

    * Porting to Python 2.5

    * Reconhecimentos

  * O que há de novo no Python 2.4

    * PEP 218: Built-In Set Objects

    * PEP 237: Unificando inteiros longos e inteiros

    * PEP 289: Generator Expressions

    * PEP 292: Simpler String Substitutions

    * PEP 318: Decorators for Functions and Methods

    * PEP 322: Reverse Iteration

    * PEP 324: New subprocess Module

    * PEP 327: Tipo de Dados Decimal

      * Por que o Decimal é necessário?

      * The "Decimal" type

      * The "Context" type

    * PEP 328: Multi-line Imports

    * PEP 331: Locale-Independent Float/String Conversions

    * Outras mudanças na linguagem

      * Otimizações

    * New, Improved, and Deprecated Modules

      * cookielib

      * doctest

    * Alterações a compilações e API C

      * Port-Specific Changes

    * Porting to Python 2.4

    * Reconhecimentos

  * O que há de novo no Python 2.3

    * PEP 218: A Standard Set Datatype

    * PEP 255: Geradores Simples

    * PEP 263: Source Code Encodings

    * PEP 273: Importing Modules from ZIP Archives

    * PEP 277: Unicode file name support for Windows NT

    * PEP 278: Universal Newline Support

    * PEP 279: enumerate()

    * PEP 282: The logging Package

    * PEP 285: A Boolean Type

    * PEP 293: Codec Error Handling Callbacks

    * PEP 301: Package Index and Metadata for Distutils

    * PEP 302: New Import Hooks

    * PEP 305: Comma-separated Files

    * PEP 307: Pickle Enhancements

    * Extended Slices

    * Outras mudanças na linguagem

      * String Changes

      * Otimizações

    * New, Improved, and Deprecated Modules

      * Date/Time Type

      * The optparse Module

    * Pymalloc: A Specialized Object Allocator

    * Alterações a compilações e API C

      * Port-Specific Changes

    * Other Changes and Fixes

    * Porting to Python 2.3

    * Reconhecimentos

  * O que há de novo no Python 2.2

    * Introdução

    * PEPs 252 and 253: Type and Class Changes

      * Old and New Classes

      * Descriptors

      * Multiple Inheritance: The Diamond Rule

      * Attribute Access

      * Related Links

    * PEP 234: Iterators

    * PEP 255: Geradores Simples

    * PEP 237: Unificando inteiros longos e inteiros

    * PEP 238: Changing the Division Operator

    * Unicode Changes

    * PEP 227: Nested Scopes

    * Módulos Novos ou Aprimorados

    * Interpreter Changes and Fixes

    * Other Changes and Fixes

    * Reconhecimentos

  * O que há de novo no Python 2.1

    * Introdução

    * PEP 227: Nested Scopes

    * PEP 236: __future__ Directives

    * PEP 207: Rich Comparisons

    * PEP 230: Warning Framework

    * PEP 229: New Build System

    * PEP 205: Weak References

    * PEP 232: Function Attributes

    * PEP 235: Importing Modules on Case-Insensitive Platforms

    * PEP 217: Interactive Display Hook

    * PEP 208: New Coercion Model

    * PEP 241: Metadata in Python Packages

    * Módulos Novos ou Aprimorados

    * Other Changes and Fixes

    * Reconhecimentos

  * O que há de novo no Python 2.0

    * Introdução

    * E quanto ao Python 1.6?

    * Novo processo de desenvolvimento

    * Unicode

    * Compreensões de lista

    * Augmented Assignment

    * Métodos de string

    * Garbage Collection of Cycles

    * Other Core Changes

      * Alterações Menores na Linguagem

      * Changes to Built-in Functions

    * Porting to 2.0

    * Extending/Embedding Changes

    * Distutils: Making Modules Easy to Install

    * XML Modules

      * SAX2 Support

      * DOM Support

      * Relationship to PyXML

    * Module changes

    * New modules

    * IDLE Improvements

    * Módulos apagados e desativados

    * Reconhecimentos

  * Changelog

    * Python next

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * Tools/Demos

    * Python 3.12.2 final

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

    * Python 3.12.1 final

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.12.0 final

      * Core and Builtins

      * Library

      * Documentation

      * Windows

      * macOS

      * Tools/Demos

    * Python 3.12.0 release candidate 3

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

    * Python 3.12.0 release candidate 2

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.12.0 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.12.0 beta 4

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Tools/Demos

      * C API

    * Python 3.12.0 beta 3

      * Core and Builtins

      * Library

      * Tests

      * Windows

      * C API

    * Python 3.12.0 beta 2

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.12.0 beta 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.12.0 alpha 7

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * Tools/Demos

      * C API

    * Python 3.12.0 alpha 6

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * C API

    * Python 3.12.0 alpha 5

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

    * Python 3.12.0 alpha 4

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.12.0 alpha 3

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.12.0 alpha 2

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * C API

    * Python 3.12.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.11.0 beta 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.11.0 alpha 7

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.11.0 alpha 6

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * C API

    * Python 3.11.0 alpha 5

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.11.0 alpha 4

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * C API

    * Python 3.11.0 alpha 3

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * C API

    * Python 3.11.0 alpha 2

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.11.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.10.0 beta 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.10.0 alpha 7

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * C API

    * Python 3.10.0 alpha 6

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.10.0 alpha 5

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.10.0 alpha 4

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * macOS

      * Tools/Demos

      * C API

    * Python 3.10.0 alpha 3

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.10.0 alpha 2

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.10.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.9.0 beta 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * Tools/Demos

      * C API

    * Python 3.9.0 alpha 6

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.9.0 alpha 5

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.9.0 alpha 4

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * C API

    * Python 3.9.0 alpha 3

      * Core and Builtins

      * Library

      * Documentation

      * Build

      * IDLE

      * C API

    * Python 3.9.0 alpha 2

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * C API

    * Python 3.9.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.8.0 beta 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.8.0 alpha 4

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.8.0 alpha 3

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.8.0 alpha 2

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Windows

      * IDLE

    * Python 3.8.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.7.0 final

      * Library

      * C API

    * Python 3.7.0 release candidate 1

      * Core and Builtins

      * Library

      * Documentation

      * Build

      * Windows

      * IDLE

    * Python 3.7.0 beta 5

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * macOS

      * IDLE

    * Python 3.7.0 beta 4

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

    * Python 3.7.0 beta 3

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.7.0 beta 2

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

    * Python 3.7.0 beta 1

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * C API

    * Python 3.7.0 alpha 4

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Windows

      * Tools/Demos

      * C API

    * Python 3.7.0 alpha 3

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.7.0 alpha 2

      * Core and Builtins

      * Library

      * Documentation

      * Build

      * IDLE

      * C API

    * Python 3.7.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.6.6 final

    * Python 3.6.6 release candidate 1

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.6.5 final

      * Tests

      * Build

    * Python 3.6.5 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.6.4 final

    * Python 3.6.4 release candidate 1

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * macOS

      * IDLE

      * Tools/Demos

      * C API

    * Python 3.6.3 final

      * Library

      * Build

    * Python 3.6.3 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * IDLE

      * Tools/Demos

    * Python 3.6.2 final

    * Python 3.6.2 release candidate 2

      * Security

    * Python 3.6.2 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * IDLE

      * C API

      * Build

      * Documentation

      * Tools/Demos

      * Tests

      * Windows

    * Python 3.6.1 final

      * Core and Builtins

      * Build

    * Python 3.6.1 release candidate 1

      * Core and Builtins

      * Library

      * IDLE

      * Windows

      * C API

      * Documentation

      * Tests

      * Build

    * Python 3.6.0 final

    * Python 3.6.0 release candidate 2

      * Core and Builtins

      * Tools/Demos

      * Windows

      * Build

    * Python 3.6.0 release candidate 1

      * Core and Builtins

      * Library

      * C API

      * Documentation

      * Tools/Demos

    * Python 3.6.0 beta 4

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

    * Python 3.6.0 beta 3

      * Core and Builtins

      * Library

      * Windows

      * Build

      * Tests

    * Python 3.6.0 beta 2

      * Core and Builtins

      * Library

      * Windows

      * C API

      * Build

      * Tests

    * Python 3.6.0 beta 1

      * Core and Builtins

      * Library

      * IDLE

      * C API

      * Tests

      * Build

      * Tools/Demos

      * Windows

    * Python 3.6.0 alpha 4

      * Core and Builtins

      * Library

      * IDLE

      * Tests

      * Windows

      * Build

    * Python 3.6.0 alpha 3

      * Security

      * Core and Builtins

      * Library

      * IDLE

      * C API

      * Build

      * Tools/Demos

      * Documentation

      * Tests

    * Python 3.6.0 alpha 2

      * Security

      * Core and Builtins

      * Library

      * IDLE

      * Documentation

      * Tests

      * Windows

      * Build

      * C API

      * Tools/Demos

    * Python 3.6.0 alpha 1

      * Security

      * Core and Builtins

      * Library

      * IDLE

      * Documentation

      * Tests

      * Build

      * Windows

      * Tools/Demos

      * C API

    * Python 3.5.5 final

    * Python 3.5.5 release candidate 1

      * Security

      * Core and Builtins

      * Library

    * Python 3.5.4 final

      * Library

    * Python 3.5.4 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * Documentation

      * Tests

      * Build

      * Windows

      * C API

    * Python 3.5.3 final

    * Python 3.5.3 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * IDLE

      * C API

      * Documentation

      * Tests

      * Tools/Demos

      * Windows

      * Build

    * Python 3.5.2 final

      * Core and Builtins

      * Tests

      * IDLE

    * Python 3.5.2 release candidate 1

      * Security

      * Core and Builtins

      * Library

      * IDLE

      * Documentation

      * Tests

      * Build

      * Windows

      * Tools/Demos

    * Python 3.5.1 final

      * Core and Builtins

      * Windows

    * Python 3.5.1 release candidate 1

      * Core and Builtins

      * Library

      * IDLE

      * Documentation

      * Tests

      * Build

      * Windows

      * Tools/Demos

    * Python 3.5.0 final

      * Build

    * Python 3.5.0 release candidate 4

      * Library

      * Build

    * Python 3.5.0 release candidate 3

      * Core and Builtins

      * Library

    * Python 3.5.0 release candidate 2

      * Core and Builtins

      * Library

    * Python 3.5.0 release candidate 1

      * Core and Builtins

      * Library

      * IDLE

      * Documentation

      * Tests

    * Python 3.5.0 beta 4

      * Core and Builtins

      * Library

      * Build

    * Python 3.5.0 beta 3

      * Core and Builtins

      * Library

      * Tests

      * Documentation

      * Build

    * Python 3.5.0 beta 2

      * Core and Builtins

      * Library

    * Python 3.5.0 beta 1

      * Core and Builtins

      * Library

      * IDLE

      * Tests

      * Documentation

      * Tools/Demos

    * Python 3.5.0 alpha 4

      * Core and Builtins

      * Library

      * Build

      * Tests

      * Tools/Demos

      * C API

    * Python 3.5.0 alpha 3

      * Core and Builtins

      * Library

      * Build

      * Tests

      * Tools/Demos

    * Python 3.5.0 alpha 2

      * Core and Builtins

      * Library

      * Build

      * C API

      * Windows

    * Python 3.5.0 alpha 1

      * Core and Builtins

      * Library

      * IDLE

      * Build

      * C API

      * Documentation

      * Tests

      * Tools/Demos

      * Windows

* O tutorial de Python

  * 1. Abrindo seu apetite

  * 2. Utilizando o interpretador Python

    * 2.1. Chamando o interpretador

      * 2.1.1. Passagem de argumentos

      * 2.1.2. Modo interativo

    * 2.2. O interpretador e seu ambiente

      * 2.2.1. Edição de código-fonte

  * 3. Uma introdução informal ao Python

    * 3.1. Usando Python como uma calculadora

      * 3.1.1. Números

      * 3.1.2. Texto

      * 3.1.3. Listas

    * 3.2. Primeiros passos para a programação

  * 4. Mais ferramentas de controle de fluxo

    * 4.1. Comandos "if"

    * 4.2. Comandos "for"

    * 4.3. A função "range()"

    * 4.4. Comandos "break" e "continue", e cláusula "else", nos laços
      de repetição

    * 4.5. Comandos "pass"

    * 4.6. Instruções "match"

    * 4.7. Definindo funções

    * 4.8. Mais sobre definição de funções

      * 4.8.1. Argumentos com valor padrão

      * 4.8.2. Argumentos nomeados

      * 4.8.3. Parâmetros especiais

        * 4.8.3.1. Argumentos posicional-ou-nomeados

        * 4.8.3.2. Parâmetros somente-posicionais

        * 4.8.3.3. Argumentos somente-nomeados

        * 4.8.3.4. Exemplos de funções

        * 4.8.3.5. Recapitulando

      * 4.8.4. Listas de argumentos arbitrárias

      * 4.8.5. Desempacotando listas de argumentos

      * 4.8.6. Expressões lambda

      * 4.8.7. Strings de documentação

      * 4.8.8. Anotações de função

    * 4.9. Intermezzo: estilo de codificação

  * 5. Estruturas de dados

    * 5.1. Mais sobre listas

      * 5.1.1. Usando listas como pilhas

      * 5.1.2. Usando listas como filas

      * 5.1.3. Compreensões de lista

      * 5.1.4. Compreensões de lista aninhadas

    * 5.2. A instrução "del"

    * 5.3. Tuplas e Sequências

    * 5.4. Conjuntos

    * 5.5. Dicionários

    * 5.6. Técnicas de iteração

    * 5.7. Mais sobre condições

    * 5.8. Comparando sequências e outros tipos

  * 6. Módulos

    * 6.1. Mais sobre módulos

      * 6.1.1. Executando módulos como scripts

      * 6.1.2. O caminho de busca dos módulos

      * 6.1.3. Arquivos Python "compilados"

    * 6.2. Módulos padrões

    * 6.3. A função "dir()"

    * 6.4. Pacotes

      * 6.4.1. Importando * de um pacote

      * 6.4.2. Referências em um mesmo pacote

      * 6.4.3. Pacotes em múltiplos diretórios

  * 7. Entrada e Saída

    * 7.1. Refinando a formatação de saída

      * 7.1.1. Strings literais formatadas

      * 7.1.2. O método format()

      * 7.1.3. Formatação manual de string

      * 7.1.4. Formatação de strings à moda antiga

    * 7.2. Leitura e escrita de arquivos

      * 7.2.1. Métodos de objetos arquivo

      * 7.2.2. Gravando dados estruturados com "json"

  * 8. Erros e exceções

    * 8.1. Erros de sintaxe

    * 8.2. Exceções

    * 8.3. Tratamento de exceções

    * 8.4. Levantando exceções

    * 8.5. Encadeamento de exceções

    * 8.6. Exceções definidas pelo usuário

    * 8.7. Definindo ações de limpeza

    * 8.8. Ações de limpeza predefinidas

    * 8.9. Criando e tratando várias exceções não relacionadas

    * 8.10. Enriquecendo exceções com notas

  * 9. Classes

    * 9.1. Uma palavra sobre nomes e objetos

    * 9.2. Escopos e espaços de nomes do Python

      * 9.2.1. Exemplo de escopos e espaço de nomes

    * 9.3. Uma primeira olhada nas classes

      * 9.3.1. Sintaxe da definição de classe

      * 9.3.2. Objetos de Class

      * 9.3.3. Objetos instância

      * 9.3.4. Objetos método

      * 9.3.5. Variáveis de classe e instância

    * 9.4. Observações aleatórias

    * 9.5. Herança

      * 9.5.1. Herança múltipla

    * 9.6. Variáveis privadas

    * 9.7. Curiosidades e conclusões

    * 9.8. Iteradores

    * 9.9. Geradores

    * 9.10. Expressões geradoras

  * 10. Um breve passeio pela biblioteca padrão

    * 10.1. Interface com o sistema operacional

    * 10.2. Caracteres curinga

    * 10.3. Argumentos de linha de comando

    * 10.4. Redirecionamento de erros e encerramento do programa

    * 10.5. Reconhecimento de padrões em strings

    * 10.6. Matemática

    * 10.7. Acesso à internet

    * 10.8. Data e hora

    * 10.9. Compressão de dados

    * 10.10. Medição de desempenho

    * 10.11. Controle de qualidade

    * 10.12. Baterias incluídas

  * 11. Um breve passeio pela biblioteca padrão --- parte II

    * 11.1. Formatando a saída

    * 11.2. Usando templates

    * 11.3. Trabalhando com formatos binários de dados

    * 11.4. Multi-threading

    * 11.5. Gerando logs

    * 11.6. Referências fracas

    * 11.7. Ferramentas para trabalhar com listas

    * 11.8. Aritmética decimal com ponto flutuante

  * 12. Ambientes virtuais e pacotes

    * 12.1. Introdução

    * 12.2. Criando ambientes virtuais

    * 12.3. Gerenciando pacotes com o pip

  * 13. E agora?

  * 14. Edição de entrada interativa e substituição de histórico

    * 14.1. Tab Completion e Histórico de Edição

    * 14.2. Alternativas ao interpretador interativo

  * 15. Aritmética de ponto flutuante: problemas e limitações

    * 15.1. Erro de representação

  * 16. Anexo

    * 16.1. Modo interativo

      * 16.1.1. Tratamento de erros

      * 16.1.2. Scripts Python executáveis

      * 16.1.3. Arquivo de inicialização do modo interativo

      * 16.1.4. Módulos de customização

* Configurações e Uso do Python

  * 1. Linha de comando e ambiente

    * 1.1. Linha de comando

      * 1.1.1. Opções de interface

      * 1.1.2. Opções genéricas

      * 1.1.3. Opções diversas

      * 1.1.4. Opções que você não deve usar

    * 1.2. Variáveis de ambiente

      * 1.2.1. Variáveis de modo de depuração

  * 2. Utilizando Python em plataformas Unix

    * 2.1. Obtendo e instalando a versão mais recente do Python

      * 2.1.1. No Linux

      * 2.1.2. On FreeBSD e OpenBSD

    * 2.2. Compilando o Python

    * 2.3. Paths e arquivos relacionados com o Python

    * 2.4. Diversos

    * 2.5. OpenSSL personalizado

  * 3. Configurar o Python

    * 3.1. Build Requirements

    * 3.2. Generated files

      * 3.2.1. configure script

    * 3.3. Opções de configuração

      * 3.3.1. Opções gerais

      * 3.3.2. Opções de WebAssembly

      * 3.3.3. Opções de instalação

      * 3.3.4. Opções de desempenho

      * 3.3.5. Compilação de depuração do Python

      * 3.3.6. Debug options

      * 3.3.7. Linker options

      * 3.3.8. Libraries options

      * 3.3.9. Security Options

      * 3.3.10. macOS Options

      * 3.3.11. Cross Compiling Options

    * 3.4. Python Build System

      * 3.4.1. Main files of the build system

      * 3.4.2. Main build steps

      * 3.4.3. Main Makefile targets

      * 3.4.4. C extensions

    * 3.5. Compiler and linker flags

      * 3.5.1. Preprocessor flags

      * 3.5.2. Compiler flags

      * 3.5.3. Linker flags

  * 4. Utilizando Python no Windows

    * 4.1. O instalador completo

      * 4.1.1. Etapas de instalação

      * 4.1.2. Removendo a Limitação do MAX_PATH

      * 4.1.3. Instalando sem UI

      * 4.1.4. Instalando Sem Download

      * 4.1.5. Modificando uma instalação

    * 4.2. O pacote Microsoft Store

      * 4.2.1. Problemas conhecidos

        * 4.2.1.1. Redirecionamento de dados locais, registro e
          caminhos temporários

    * 4.3. Os pacotes nuget.org

    * 4.4. O pacote embutível

      * 4.4.1. Aplicação Python

      * 4.4.2. Incorporando Python

    * 4.5. Pacotes Alternativos

    * 4.6. Configurando o Python

      * 4.6.1. Excursus: Configurando variáveis de ambiente

      * 4.6.2. Encontrando o executável do Python

    * 4.7. Modo UTF-8

    * 4.8. Inicializador Python para Windows

      * 4.8.1. Começando

        * 4.8.1.1. Pela linha de comando

        * 4.8.1.2. Ambientes virtuais

        * 4.8.1.3. Por um script

        * 4.8.1.4. Por associação de arquivos

      * 4.8.2. Linhas Shebang

      * 4.8.3. Argumentos em linhas shebang

      * 4.8.4. Personalização

        * 4.8.4.1. Personalização via arquivos INI

        * 4.8.4.2. Personalizando versões padrão do Python

      * 4.8.5. Diagnósticos

      * 4.8.6. Dry Run

      * 4.8.7. Install on demand

      * 4.8.8. Return codes

    * 4.9. Encontrando módulos

    * 4.10. Módulos adicionais

      * 4.10.1. PyWin32

      * 4.10.2. cx_Freeze

    * 4.11. Compilando Python no Windows

    * 4.12. Outras plataformas

  * 5. Utilizando Python em um Mac

    * 5.1. Getting and Installing Python

      * 5.1.1. Como executar um script Python

      * 5.1.2. Executando scripts como uma GUI

      * 5.1.3. Configuração

    * 5.2. A IDE

    * 5.3. Instalando pacotes adicionais ao python

    * 5.4. GUI Programming

    * 5.5. Distributing Python Applications

    * 5.6. Outros recursos

  * 6. Editores e IDEs

* A Referência da Linguagem Python

  * 1. Introdução

    * 1.1. Implementações Alternativas

    * 1.2. Notação

  * 2. Análise léxica

    * 2.1. Estrutura das linhas

      * 2.1.1. Linhas lógicas

      * 2.1.2. Linhas físicas

      * 2.1.3. Comentários

      * 2.1.4. Declarações de codificação

      * 2.1.5. Junção de linha explícita

      * 2.1.6. Junção de linha implícita

      * 2.1.7. Linhas em branco

      * 2.1.8. Indentação

      * 2.1.9. Espaços em branco entre tokens

    * 2.2. Outros tokens

    * 2.3. Identificadores e palavras-chave

      * 2.3.1. Palavras reservadas

      * 2.3.2. Palavras reservadas contextuais

      * 2.3.3. Classes reservadas de identificadores

    * 2.4. Literais

      * 2.4.1. Literais de string e bytes

        * 2.4.1.1. Sequências de escape

      * 2.4.2. Concatenação de literal de string

      * 2.4.3. Literais de strings formatadas

      * 2.4.4. Literais numéricos

      * 2.4.5. Inteiros literais

      * 2.4.6. Literais de ponto flutuante

      * 2.4.7. Literais imaginários

    * 2.5. Operadores

    * 2.6. Delimitadores

  * 3. Modelo de dados

    * 3.1. Objetos, valores e tipos

    * 3.2. A hierarquia de tipos padrão

      * 3.2.1. None

      * 3.2.2. NotImplemented

      * 3.2.3. Ellipsis

      * 3.2.4. "numbers.Number"

        * 3.2.4.1. "numbers.Integral"

        * 3.2.4.2. "numbers.Real" ("float")

        * 3.2.4.3. "numbers.Complex" ("complex")

      * 3.2.5. Sequências

        * 3.2.5.1. Sequências imutáveis

        * 3.2.5.2. Sequências mutáveis

      * 3.2.6. Tipos de conjuntos

      * 3.2.7. Mapeamentos

        * 3.2.7.1. Dicionários

      * 3.2.8. Tipos chamáveis

        * 3.2.8.1. Funções definidas pelo usuário

          * 3.2.8.1.1. Special read-only attributes

          * 3.2.8.1.2. Special writable attributes

        * 3.2.8.2. Métodos de instância

        * 3.2.8.3. Funções geradoras

        * 3.2.8.4. Funções de corrotina

        * 3.2.8.5. Funções geradoras assíncronas

        * 3.2.8.6. Funções embutidas

        * 3.2.8.7. Métodos embutidos

        * 3.2.8.8. Classes

        * 3.2.8.9. Instâncias de classes

      * 3.2.9. Módulos

      * 3.2.10. Classes personalizadas

      * 3.2.11. Instâncias de classe

      * 3.2.12. Objetos de E/S (também conhecidos como objetos
        arquivo)

      * 3.2.13. Tipos internos

        * 3.2.13.1. Objetos código

          * 3.2.13.1.1. Special read-only attributes

          * 3.2.13.1.2. Methods on code objects

        * 3.2.13.2. Objetos quadro

          * 3.2.13.2.1. Special read-only attributes

          * 3.2.13.2.2. Special writable attributes

          * 3.2.13.2.3. Frame object methods

        * 3.2.13.3. Objetos traceback

        * 3.2.13.4. Objetos slice

        * 3.2.13.5. Objetos método estático

        * 3.2.13.6. Objetos método de classe

    * 3.3. Nomes de métodos especiais

      * 3.3.1. Personalização básica

      * 3.3.2. Personalizando o acesso aos atributos

        * 3.3.2.1. Personalizando acesso a atributos de módulos

        * 3.3.2.2. Implementando descritores

        * 3.3.2.3. Invocando descritores

        * 3.3.2.4. __slots__

      * 3.3.3. Personalizando a criação de classe

        * 3.3.3.1. Metaclasses

        * 3.3.3.2. Resolvendo entradas de MRO

        * 3.3.3.3. Determinando a metaclasse apropriada

        * 3.3.3.4. Preparando o espaço de nomes da classe

        * 3.3.3.5. Executando o corpo da classe

        * 3.3.3.6. Criando o objeto classe

        * 3.3.3.7. Usos para metaclasses

      * 3.3.4. Personalizando verificações de instância e subclasse

      * 3.3.5. Emulando tipos genéricos

        * 3.3.5.1. O propósito de *__class_getitem__*

        * 3.3.5.2. *__class_getitem__* versus *__getitem__*

      * 3.3.6. Emulando objetos chamáveis

      * 3.3.7. Emulando de tipos contêineres

      * 3.3.8. Emulando tipos numéricos

      * 3.3.9. Gerenciadores de contexto da instrução with

      * 3.3.10. Customizando argumentos posicionais na classe
        correspondência de padrão

      * 3.3.11. Emulating buffer types

      * 3.3.12. Pesquisa de método especial

    * 3.4. Corrotinas

      * 3.4.1. Objetos aguardáveis

      * 3.4.2. Objetos corrotina

      * 3.4.3. Iteradores assíncronos

      * 3.4.4. Gerenciadores de contexto assíncronos

  * 4. Modelo de execução

    * 4.1. Estrutura de um programa

    * 4.2. Nomeação e ligação

      * 4.2.1. Ligação de nomes

      * 4.2.2. Resolução de nomes

      * 4.2.3. Escopos de anotação

      * 4.2.4. Avaliação preguiçosa

      * 4.2.5. Builtins e execução restrita

      * 4.2.6. Interação com recursos dinâmicos

    * 4.3. Exceções

  * 5. O sistema de importação

    * 5.1. "importlib"

    * 5.2. Pacotes

      * 5.2.1. Pacotes regulares

      * 5.2.2. Pacotes de espaço de nomes

    * 5.3. Caminho de busca

      * 5.3.1. Caches de módulos

      * 5.3.2. Buscadores e carregadores

      * 5.3.3. Ganchos de importação

      * 5.3.4. O meta caminho

    * 5.4. Carregando

      * 5.4.1. Loaders

      * 5.4.2. Submódulos

      * 5.4.3. Module spec

      * 5.4.4. Import-related module attributes

      * 5.4.5. module.__path__

      * 5.4.6. Module reprs

      * 5.4.7. Cached bytecode invalidation

    * 5.5. The Path Based Finder

      * 5.5.1. Path entry finders

      * 5.5.2. Path entry finder protocol

    * 5.6. Replacing the standard import system

    * 5.7. Package Relative Imports

    * 5.8. Special considerations for __main__

      * 5.8.1. __main__.__spec__

    * 5.9. Referências

  * 6. Expressões

    * 6.1. Conversões aritméticas

    * 6.2. Átomos

      * 6.2.1. Identificadores (Nomes)

      * 6.2.2. Literais

      * 6.2.3. Formas de parênteses

      * 6.2.4. Sintaxe de criação de listas, conjuntos e dicionários

      * 6.2.5. Sintaxes de criação de lista

      * 6.2.6. Sintaxes de criação de conjunto

      * 6.2.7. Sintaxes de criação de dicionário

      * 6.2.8. Expressões geradoras

      * 6.2.9. Expressões yield

        * 6.2.9.1. Métodos de iterador gerador

        * 6.2.9.2. Exemplos

        * 6.2.9.3. Funções geradoras assíncronas

        * 6.2.9.4. Métodos geradores-iteradores assíncronos

    * 6.3. Primárias

      * 6.3.1. Referências de atributo

      * 6.3.2. Subscrições

      * 6.3.3. Fatiamentos

      * 6.3.4. Chamadas

    * 6.4. Expressão await

    * 6.5. O operador de potência

    * 6.6. Unary arithmetic and bitwise operations

    * 6.7. Binary arithmetic operations

    * 6.8. Shifting operations

    * 6.9. Operações binárias bit a bit

    * 6.10. Comparações

      * 6.10.1. Comparações de valor

      * 6.10.2. Membership test operations

      * 6.10.3. Comparações de identidade

    * 6.11. Operações booleanas

    * 6.12. Expressões de atribuição

    * 6.13. Expressões condicionais

    * 6.14. Lambdas

    * 6.15. Listas de expressões

    * 6.16. Ordem de avaliação

    * 6.17. Precedência de operadores

  * 7. Instruções simples

    * 7.1. Instruções de expressão

    * 7.2. Instruções de atribuição

      * 7.2.1. Instruções de atribuição aumentada

      * 7.2.2. instruções de atribuição anotado

    * 7.3. A instrução "assert"

    * 7.4. A instrução "pass"

    * 7.5. A instrução "del"

    * 7.6. A instrução "return"

    * 7.7. A instrução "yield"

    * 7.8. A instrução "raise"

    * 7.9. A instrução "break"

    * 7.10. A instrução "continue"

    * 7.11. A instrução "import"

      * 7.11.1. Instruções future

    * 7.12. A instrução "global"

    * 7.13. A instrução "nonlocal"

    * 7.14. A instrução "type"

  * 8. Instruções compostas

    * 8.1. A instrução "if"

    * 8.2. A instrução "while"

    * 8.3. A instrução "for"

    * 8.4. A instrução "try"

      * 8.4.1. Cláusula "except"

      * 8.4.2. "except*" clause

      * 8.4.3. "else" clause

      * 8.4.4. "finally" clause

    * 8.5. The "with" statement

    * 8.6. The "match" statement

      * 8.6.1. Visão Geral

      * 8.6.2. Guards

      * 8.6.3. Irrefutable Case Blocks

      * 8.6.4. Patterns

        * 8.6.4.1. OR Patterns

        * 8.6.4.2. AS Patterns

        * 8.6.4.3. Literal Patterns

        * 8.6.4.4. Capture Patterns

        * 8.6.4.5. Wildcard Patterns

        * 8.6.4.6. Value Patterns

        * 8.6.4.7. Group Patterns

        * 8.6.4.8. Sequence Patterns

        * 8.6.4.9. Mapping Patterns

        * 8.6.4.10. Class Patterns

    * 8.7. Definições de função

    * 8.8. Definições de classe

    * 8.9. Corrotinas

      * 8.9.1. Coroutine function definition

      * 8.9.2. The "async for" statement

      * 8.9.3. The "async with" statement

    * 8.10. Type parameter lists

      * 8.10.1. Generic functions

      * 8.10.2. Generic classes

      * 8.10.3. Generic type aliases

  * 9. Componentes de Alto Nível

    * 9.1. Programas Python completos

    * 9.2. Entrada de arquivo

    * 9.3. Entrada interativa

    * 9.4. Entrada de expressão

  * 10. Especificação Completa da Gramática

* A Biblioteca Padrão do Python

  * Introdução

    * Observações sobre disponibilidade

      * Plataformas WebAssembly

  * Funções embutidas

  * Constantes embutidas

    * Constantes adicionadas pelo módulo "site"

  * Tipos embutidos

    * Teste do valor verdade

    * Operações booleanas --- "and", "or", "not"

    * Comparações

    * Tipos numéricos --- "int", "float", "complex"

      * Operações de bits em tipos inteiros

      * Métodos adicionais em tipos inteiros

      * Métodos adicionais em ponto flutuante

      * Hashing de tipos numéricos

    * Tipo booleano - "bool"

    * Tipos iteradores

      * Tipos geradores

    * Tipos sequências --- "list", "tuple", "range"

      * Operações comuns de sequências

      * Tipos sequência imutáveis

      * Tipos sequências mutáveis

      * Listas

      * Tuplas

      * Intervalos

    * Tipo sequência de texto --- "str"

      * Métodos de string

      * Formatação de String no Formato no estilo "printf"

    * Tipos de Sequência Binária --- "bytes", "bytearray",
      "memoryview"

      * Objetos Bytes

      * Bytearray Objects

      * Operações com Bytes e Bytearray

      * Estilo de Formatação de bytes "printf"-style

      * Memory Views

    * Tipo conjuntos --- "set", "frozenset"

    * Tipo mapeamento --- "dict"

      * Objetos de visão de dicionário

    * Tipos de Gerenciador de Contexto

    * Tipos de anotação de tipo --- *Apelido genérico*, *União*

      * Tipo Generic Alias

        * Classes genéricas padrão

        * Atributos especiais de objetos "GenericAlias"

      * Tipo União

    * Outros tipos embutidos

      * Módulos

      * Classes e Instâncias de Classes

      * Funções

      * Métodos

      * Objetos código

      * Objetos tipo

      * O objeto nulo

      * O Objeto Ellipsis

      * O Objeto NotImplemented

      * Objetos Internos

    * Atributos Especiais

    * Limitação de comprimento de string na conversão para inteiro

      * APIs afetadas

      * Configurando o limiter

      * Configuração recomendada

  * Exceções embutidas

    * Contexto da exceção

    * Herdando de exceções embutidas

    * Classes base

    * Exceções concretas

      * Exceções de sistema operacional

    * Avisos

    * Grupos de exceções

    * Hierarquia das exceções

  * Serviços de Processamento de Texto

    * "string" --- Operações comuns de strings

      * Constantes de strings

      * Formatação personalizada de strings

      * Sintaxe das strings de formato

        * Minilinguagem de especificação de formato

        * Exemplos de formato

      * Strings de modelo

      * Funções auxiliares

    * "re" --- Operações com expressões regulares

      * Sintaxe de expressão regular

      * Conteúdo do módulo

        * Sinalizadores

        * Funções

        * Exceções

      * Objetos expressão regular

      * Objetos correspondência

      * Exemplos de expressão regular

        * Verificando por um par

        * Simulando scanf()

        * search() vs. match()

        * Criando uma lista telefônica

        * Mastigação de texto

        * Encontrando todos os advérbios

        * Encontrando todos os advérbios e suas posições

        * Notação de string bruta

        * Escrevendo um tokenizador

    * "difflib" --- Helpers for computing deltas

      * SequenceMatcher Objects

      * SequenceMatcher Examples

      * Differ Objects

      * Differ Example

      * A command-line interface to difflib

      * ndiff example

    * "textwrap" --- Text wrapping and filling

    * "unicodedata" --- Unicode Database

    * "stringprep" --- Internet String Preparation

    * "readline" --- GNU readline interface

      * Arquivo init

      * Line buffer

      * Arquivo de histórico

      * History list

      * Startup hooks

      * Completion

      * Exemplo

    * "rlcompleter" --- Função de completamento para GNU readline

  * Serviços de Dados Binários

    * "struct" --- Interpret bytes as packed binary data

      * Funções e Exceções

      * Format Strings

        * Byte Order, Size, and Alignment

        * Caracteres Formatados

        * Exemplos

      * Applications

        * Native Formats

        * Standard Formats

      * Classes

    * "codecs" --- Codec registry and base classes

      * Codec Base Classes

        * Error Handlers

        * Stateless Encoding and Decoding

        * Incremental Encoding and Decoding

          * IncrementalEncoder Objects

          * IncrementalDecoder Objects

        * Stream Encoding and Decoding

          * StreamWriter Objects

          * StreamReader Objects

          * StreamReaderWriter Objects

          * StreamRecoder Objects

      * Encodings and Unicode

      * Standard Encodings

      * Python Specific Encodings

        * Text Encodings

        * Binary Transforms

        * Text Transforms

      * "encodings.idna" --- Internationalized Domain Names in
        Applications

      * "encodings.mbcs" --- Windows ANSI codepage

      * "encodings.utf_8_sig" --- UTF-8 codec with BOM signature

  * Tipos de Dados

    * "datetime" --- Tipos básicos de data e hora

      * Objetos Conscientes e Ingênuos

      * Constantes

      * Tipos disponíveis

        * Propriedades Comuns

        * Determinando se um Objeto é Consciente ou Ingênuo

      * Objetos "timedelta"

        * Exemplos de uso: "timedelta"

      * Objetos "date"

        * Exemplos de uso: "date"

      * Objetos "datetime"

        * Exemplos de uso: "datetime"

      * Objetos "time"

        * Exemplos de uso: "time"

      * Objetos "tzinfo"

      * Objetos "timezone"

      * "strftime()" and "strptime()" Behavior

        * "strftime()" and "strptime()" Format Codes

        * Detalhes técnicos

    * "zoneinfo" --- Suporte a fuso horário da IANA

      * Usando "ZoneInfo"

      * Data sources

        * Configuring the data sources

          * Compile-time configuration

          * Configuração do ambiente

          * Runtime configuration

      * The "ZoneInfo" class

        * String representations

        * Pickle serialization

      * Funções

      * Globals

      * Exceptions and warnings

    * "calendar" --- General calendar-related functions

      * Uso da linha de comando

    * "collections" --- Tipos de dados de contêineres

      * Objetos "ChainMap"

        * Exemplos e Receitas de "ChainMap"

      * Objetos "Counter"

      * Objetos "deque"

        * Receitas de "deque"

      * Objetos "defaultdict"

        * Exemplos de "defaultdict"

      * "namedtuple()" Factory Function for Tuples with Named Fields

      * Objetos "OrderedDict"

        * "OrderedDict" Examples and Recipes

      * "UserDict" objects

      * "UserList" objects

      * "UserString" objects

    * "collections.abc" --- Classes Base Abstratas para Contêineres

      * Classes Base Abstratas de Coleções

      * Collections Abstract Base Classes -- Detailed Descriptions

      * Exemplos e receitas

    * "heapq" --- Heap queue algorithm

      * Exemplos básicos

      * Priority Queue Implementation Notes

      * Teoria

    * "bisect" --- Algoritmo de bisseção de vetor

      * Observações sobre desempenho

      * Pesquisando em listas ordenadas

      * Exemplos

    * "array"--- Vetores eficientes de valores numéricos

    * "weakref" --- Weak references

      * Objetos de referência fraca

      * Exemplo

      * Objetos finalizadores

      * Comparing finalizers with "__del__()" methods

    * "types" --- Criação de tipos dinâmicos e nomes para tipos
      embutidos

      * Criação de tipos dinâmicos

      * Tipos padrão do interpretador

      * Classes e funções de utilidades adicionais

      * Funções de utilidade de corrotina

    * "copy" --- Operações de cópia profunda e cópia rasa

    * "pprint" --- Impressão Bonita de Dados

      * Funções

      * PrettyPrinter Objects

      * Exemplo

    * "reprlib" --- Implementação alternativa à "repr()"

      * Objetos Repr

      * Subclassing Repr Objects

    * "enum" --- Suporte a enumerações

      * Conteúdo do módulo

      * Tipos de Dados

        * Nomes "__dunder__" suportados

        * Nomes "_sunder_" suportados

      * Utilities and Decorators

      * Notas

    * "graphlib" --- Funcionalidade para operar com estruturas do tipo
      grafo

      * Exceções

  * Módulos Matemáticos e Numéricos

    * "numbers" --- Classes base abstratas numéricas

      * A torre numérica

      * Nota para implementadores de tipos

        * Adicionando mais ABCs numéricas

        * Implementando as operações aritméticas

    * "math" --- Funções matemáticas

      * Funções teóricas dos números e de representação

      * Funções de potência e logarítmicas

      * Funções trigonométricas

      * Conversão angular

      * Funções hiperbólicas

      * Funções especiais

      * Constantes

    * "cmath" --- Funções matemáticas para números complexos

      * Conversions to and from polar coordinates

      * Funções de potência e logarítmicas

      * Funções trigonométricas

      * Funções hiperbólicas

      * Classification functions

      * Constantes

    * "decimal" --- Aritmética de ponto fixo decimal e ponto flutuante

      * Tutorial de início rápido

      * Objetos de Decimal

        * Operandos lógicos

      * Objetos de contexto

      * Constantes

      * Modos de arredondamento

      * Sinais

      * Observações sobre ponto flutuante

        * Atenuando o erro de arredondamento com maior precisão

        * Valores especiais

      * Trabalhando com threads

      * Receitas

      * Perguntas Frequentes sobre Decimal

    * "fractions" --- Rational numbers

    * "random" --- Gera números pseudoaleatórios

      * Funções de contabilidade

      * Funções para bytes

      * Funções para inteiros

      * Funções para sequências

      * Discrete distributions

      * Distribuições com valor real

      * Gerador alternativo

      * Notas sobre reprodutibilidade

      * Exemplos

      * Receitas

    * "statistics" --- Funções estatísticas

      * Médias e medidas de valor central

      * Medidas de espalhamento

      * Statistics for relations between two inputs

      * Detalhes das funções

      * Exceções

      * Objetos "NormalDist"

        * Exemplos e receitas com "NormalDist"

          * Classic probability problems

          * Monte Carlo inputs for simulations

          * Approximating binomial distributions

          * Naive bayesian classifier

          * Kernel density estimation

  * Módulos de Programação Funcional

    * "itertools" --- Funções que criam iteradores para laços
      eficientes

      * Itertool Functions

      * Receitas com itertools

    * "functools" --- Funções e operações de ordem superior em objetos
      chamáveis

      * Objetos "partial"

    * "operator" --- Operadores padrões como funções

      * Mapeando os operadores para suas respectivas funções

      * Operadores in-place

  * Acesso a arquivos e diretórios

    * "pathlib" --- Caminhos do sistema de arquivos orientados a
      objetos

      * Uso básico

      * Caminhos puros

        * Propriedades gerais

        * Operadores

        * Acessando partes individuais

        * Métodos e propriedades

      * Caminhos concretos

        * Métodos

      * Correspondência a ferramentas no módulo "os"

    * "os.path" --- Manipulações comuns de nomes de caminhos

    * "fileinput" --- Iterate over lines from multiple input streams

    * "stat" --- Interpreting "stat()" results

    * "filecmp" --- Comparações de arquivos e diretórios

      * A classe "dircmp"

    * "tempfile" --- Gerar arquivos temporários e diretórios

      * Exemplos

      * Deprecated functions and variables

    * "glob" --- Expansão de padrão de nome de arquivo no estilo Unix

    * "fnmatch" --- Correspondência de padrões de nome de arquivo Unix

    * "linecache" --- Acesso aleatório a linhas de texto

    * "shutil" --- Operações de arquivo de alto nível

      * Operações de diretório e arquivos

        * Operações de cópia eficientes dependentes da plataforma

        * Exemplo de copytree

        * exemplo rmtree

      * Operações de arquivamento

        * Exemplo de arquivo

        * Exemplo de arquivamento com *base_dir*

      * Consultando o tamanho do terminal de saída

  * Persistência de Dados

    * "pickle" --- Serialização de objetos Python

      * Relacionamento com outros módulos Python

        * Comparação com "marshal"

        * Comparação com "json"

      * Formato de fluxo de dados

      * Interface do módulo

      * O que pode ser serializado e desserializado com pickle?

      * Serializando com pickle instâncias de classes

        * Persistência de objetos externos

        * Tabelas de despacho

        * Manipulação de objetos com estado

      * Redução personalizada para tipos, funções e outros objetos

      * Buffers fora da banda

        * API de provedor

        * API de consumidor

        * Exemplo

      * Restringindo globais

      * Performance

      * Exemplos

    * "copyreg" --- Registra funções de suporte "pickle"

      * Exemplo

    * "shelve" --- Persistência de objetos Python

      * Restrições

      * Exemplo

    * "marshal" --- Serialização interna de objetos Python

    * "dbm" --- Interfaces to Unix "databases"

      * "dbm.gnu" --- GNU database manager

      * "dbm.ndbm" --- New Database Manager

      * "dbm.dumb" --- Portable DBM implementation

    * "sqlite3" --- Interface DB-API 2.0 para bancos de dados SQLite

      * Tutorial

      * Referência

        * Module functions

        * Constantes do módulo

        * Connection objects

        * Cursor objects

        * Row objects

        * Blob objects

        * PrepareProtocol objects

        * Exceções

        * SQLite and Python types

        * Default adapters and converters (deprecated)

        * Command-line interface

      * Guias de como fazer

        * How to use placeholders to bind values in SQL queries

        * How to adapt custom Python types to SQLite values

          * How to write adaptable objects

          * How to register adapter callables

        * How to convert SQLite values to custom Python types

        * Adapter and converter recipes

        * How to use connection shortcut methods

        * How to use the connection context manager

        * How to work with SQLite URIs

        * How to create and use row factories

        * How to handle non-UTF-8 text encodings

      * Explicação

        * Controle de transações

          * Controle de transações através do atributo "autocommit"

          * Controle de transação através do atributo
            "isolation_level"

  * Compressão de Dados e Arquivamento

    * "zlib" --- Compactação compatível com **gzip**

    * "gzip" --- Support for **gzip** files

      * Exemplos de uso

      * Interface de linha de comando

        * Opções da linha de comando

    * "bz2" --- Suporte para compressão **bzip2**

      * (Des)compressão de arquivos

      * (Des)compressão incremental

      * (De)compressão de uma só vez (one-shot)

      * Exemplos de uso

    * "lzma" --- Compactação usando o algoritmo LZMA

      * Lendo e escrevendo arquivos compactados

      * Compactando e descompactando dados na memória

      * Diversos

      * Specifying custom filter chains

      * Exemplos

    * "zipfile" --- Trabalha com arquivos ZIP

      * Objetos ZipFile

      * Objetos Path

      * Objetos PyZipFile

      * Objetos ZipInfo

      * Interface de Linha de Comando

        * Opções de linha de comando

      * Armadilhas de descompressão

        * Do próprio arquivo

        * Limitações do sistema de arquivos

        * Limitações de recursos

        * Interrupção

        * Comportamentos padrão da extração

    * "tarfile" --- Read and write tar archive files

      * TarFile Objects

      * TarInfo Objects

      * Extraction filters

        * Default named filters

        * Filter errors

        * Hints for further verification

        * Supporting older Python versions

        * Stateful extraction filter example

      * Interface de Linha de Comando

        * Opções de linha de comando

      * Exemplos

      * Supported tar formats

      * Unicode issues

  * Formatos de Arquivo

    * "csv" --- Leitura e escrita de arquivos CSV

      * Conteúdo do módulo

      * Dialetos e parâmetros de formatação

      * Objetos Reader

      * Objetos Writer

      * Exemplos

    * "configparser" --- Configuration file parser

      * Quick Start

      * Supported Datatypes

      * Fallback Values

      * Estrutura dos arquivos INI

      * Interpolation of values

      * Mapping Protocol Access

      * Customizing Parser Behaviour

      * Exemplos de APIs legadas

      * ConfigParser Objects

      * RawConfigParser Objects

      * Exceções

    * "tomllib" --- Analisa arquivos TOML

      * Exemplos

      * Tabela de conversão

    * "netrc" --- Arquivo de processamento netrc

      * Objetos netrc

    * "plistlib" --- Generate and parse Apple ".plist" files

      * Exemplos

  * Serviços Criptográficos

    * "hashlib" --- Secure hashes and message digests

      * Hash algorithms

      * Uso

      * Constructors

      * Attributes

      * Hash Objects

      * SHAKE variable length digests

      * File hashing

      * Key derivation

      * BLAKE2

        * Creating hash objects

        * Constantes

        * Exemplos

          * Simple hashing

          * Using different digest sizes

          * Keyed hashing

          * Randomized hashing

          * Personalization

          * Modo árvore

        * Credits

    * "hmac" --- Keyed-Hashing for Message Authentication

    * "secrets" --- Gera números aleatórios seguros para gerenciar
      segredos

      * Números aleatórios

      * Gerando tokens

        * Quantos bytes os tokens devem usar?

      * Outras funções

      * Receitas e melhores práticas

  * Serviços Genéricos do Sistema Operacional

    * "os" --- Diversas interfaces de sistema operacional

      * Nomes de arquivos, argumentos de linha de comando e variáveis
        de ambiente

      * Modo UTF-8 do Python

      * Parâmetros de processo

      * Criação de objetos arquivos

      * Operações dos descritores de arquivos

        * Consultando o tamanho de um terminal

        * Herança de descritores de arquivos

      * Arquivos e diretórios

        * Atributos estendidos do Linux

      * Gerenciamento de processo

      * Interface do agendador

      * Diversas informações de sistema

      * Números aleatórios

    * "io" --- Ferramentas principais para trabalhar com fluxos

      * Visão Geral

        * Text I/O

        * Binary I/O

        * Raw I/O

      * Text Encoding

        * Opt-in EncodingWarning

      * High-level Module Interface

      * hierarquia de classe

        * I/O Base Classes

        * Raw File I/O

        * Buffered Streams

        * Text I/O

      * Performance

        * Binary I/O

        * Text I/O

        * Multi-threading

        * Reentrancy

    * "time" --- Acesso ao horário e conversões

      * Funções

      * Constantes de ID de Relógio

      * Constantes de Fuso Horário

    * "argparse" --- Analisador sintático para opções de linha de
      comando, argumentos e subcomandos

      * Core Functionality

      * Quick Links for add_argument()

      * Exemplo

        * Criando um analisador sintático

        * Adicionando argumentos

        * Análise de argumentos

      * Objetos ArgumentParser

        * prog

        * usage

        * description

        * epilog

        * parents

        * formatter_class

        * prefix_chars

        * fromfile_prefix_chars

        * argument_default

        * allow_abbrev

        * conflict_handler

        * add_help

        * exit_on_error

      * O método add_argument()

        * name ou flags

        * action

        * nargs

        * const

        * default

        * tipo

        * choices

        * required

        * help

        * metavar

        * dest

        * Action classes

      * The parse_args() method

        * Option value syntax

        * Argumentos inválidos

        * Argumentos contendo "-"

        * Argument abbreviations (prefix matching)

        * Além do "sys.argv"

        * O objeto Namespace

      * Other utilities

        * Sub-comandos

        * Objetos FileType

        * Grupos de Argumentos

        * Exclusão Mútua

        * Parser defaults

        * Imprimindo a ajuda

        * Análise parcial

        * Customizing file parsing

        * Métodos existentes

        * Intermixed parsing

      * Upgrading optparse code

      * Exceções

    * "getopt" --- Analisador sintático no estilo C para opções de
      linha de comando

    * "logging" --- Recurso de utilização do Logging para Python

      * Objetos Logger

      * Logging Levels

      * Manipulação de Objetos

      * Formatter Objects

      * Filter Objects

      * LogRecord Objects

      * Atributos LogRecord

      * LoggerAdapter Objects

      * Thread Safety

      * Funções de Nível de Módulo

      * Module-Level Attributes

      * Integration with the warnings module

    * "logging.config" --- Logging configuration

      * Configuration functions

      * Considerações de segurança

      * Configuration dictionary schema

        * Dictionary Schema Details

        * Incremental Configuration

        * Object connections

        * User-defined objects

        * Handler configuration order

        * Access to external objects

        * Access to internal objects

        * Import resolution and custom importers

        * Configuring QueueHandler and QueueListener

      * Formato do arquivo de configuração

    * "logging.handlers" --- Tratadores de registro

      * StreamHandler

      * FileHandler

      * NullHandler

      * WatchedFileHandler

      * BaseRotatingHandler

      * RotatingFileHandler

      * TimedRotatingFileHandler

      * SocketHandler

      * DatagramHandler

      * SysLogHandler

      * NTEventLogHandler

      * SMTPHandler

      * MemoryHandler

      * HTTPHandler

      * QueueHandler

      * QueueListener

    * "getpass" --- Entrada de senha portátil

    * "curses" --- Gerenciador de terminal para visualizadores de
      células de caracteres.

      * Funções

      * Window Objects

      * Constantes

    * "curses.textpad" --- Text input widget for curses programs

      * Textbox objects

    * "curses.ascii" --- Utilities for ASCII characters

    * "curses.panel" --- A panel stack extension for curses

      * Funções

      * Objetos Panel

    * "platform" ---  Access to underlying platform's identifying data

      * Cross Platform

      * Java Platform

      * Windows Platform

      * macOS Platform

      * Plataformas Unix

      * Linux Platforms

    * "errno" --- Standard errno system symbols

    * "ctypes" --- Uma biblioteca de funções externas para Python

      * Tutorial ctypes

        * Loading dynamic link libraries

        * Accessing functions from loaded dlls

        * Calling functions

        * Fundamental data types

        * Invocação de Funções, continuação

        * Calling variadic functions

        * Calling functions with your own custom data types

        * Specifying the required argument types (function prototypes)

        * Tipos de Retorno

        * Passing pointers (or: passing parameters by reference)

        * Structures and unions

        * Structure/union alignment and byte order

        * Bit fields in structures and unions

        * Arrays

        * Ponteiros

        * Conversão de Tipos

        * Tipos Incompletos

        * Funções Callbacks

        * Accessing values exported from dlls

        * Surprises

        * Variable-sized data types

      * Referência ctypes

        * Finding shared libraries

        * Loading shared libraries

        * Foreign functions

        * Function prototypes

        * Funções utilitárias

        * Data types

        * Fundamental data types

        * Structured data types

        * Arrays and pointers

  * Execução Concorrente

    * "threading" --- Paralelismo baseado em Thread

      * Thread-Local Data

      * Thread Objects

      * Lock Objects

      * Objetos RLock

      * Condition Objects

      * Semaphore Objects

        * Exemplo "Semaphore"

      * Event Objects

      * Objetos Timer

      * Barrier Objects

      * Using locks, conditions, and semaphores in the "with"
        statement

    * "multiprocessing" --- Paralelismo baseado em processo

      * Introdução

        * A classe "Process"

        * Contextos e métodos de inicialização

        * Trocando objetos entre processos

        * Sincronização entre processos

        * Compartilhando estado entre processos

        * Using a pool of workers

      * Referência

        * "Process" and exceptions

        * Pipes and Queues

        * Diversos

        * Connection Objects

        * Synchronization primitives

        * Shared "ctypes" Objects

          * The "multiprocessing.sharedctypes" module

        * Gerenciadores

          * Customized managers

          * Using a remote manager

        * Proxy Objects

          * Cleanup

        * Process Pools

        * Listeners and Clients

          * Formatos de Endereços

        * Authentication keys

        * Gerando logs

        * The "multiprocessing.dummy" module

      * Programming guidelines

        * All start methods

        * The *spawn* and *forkserver* start methods

      * Exemplos

    * "multiprocessing.shared_memory" --- Memória compartilhada para
      acesso direto entre processos

    * O pacote "concurrent"

    * "concurrent.futures" --- Iniciando tarefas em paralelo

      * Executor Objects

      * ThreadPoolExecutor

        * Exemplo de ThreadPoolExecutor

      * "`ProcessPoolExecutor`"

        * ProcessPoolExecutor Example

      * Future Objects

      * Module Functions

      * Exception classes

    * "subprocess" --- Gerenciamento de subprocessos

      * Usando o módulo "subprocess"

        * Argumentos usados frequentemente

        * Construtor Popen

        * Exceções

      * Considerações de Segurança

      * Objetos Popen

      * Windows Popen Helpers

        * Constantes do Windows

      * API de alto nível mais antiga

      * Replacing Older Functions with the "subprocess" Module

        * Replacing **/bin/sh** shell command substitution

        * Replacing shell pipeline

        * Substituindo "os.system()"

        * Replacing the "os.spawn" family

        * Replacing "os.popen()", "os.popen2()", "os.popen3()"

        * Replacing functions from the "popen2" module

      * Legacy Shell Invocation Functions

      * Notas

        * Converter uma sequência de argumentos em uma string no
          Windows

        * Disabling use of "vfork()" or "posix_spawn()"

    * "sched" --- Event scheduler

      * Objetos Scheduler

    * "queue" --- A synchronized queue class

      * Objetos Queue

      * Objetos SimpleQueue

    * "contextvars" --- Variáveis de contexto

      * Variáveis de contexto

      * Gerenciamento de contexto manual

      * Suporte a asyncio

    * "_thread"--- API de segmentação de baixo nível

  * Comunicação em Rede e Interprocesso

    * "asyncio" --- E/S assíncrona

      * Runners

        * Executando um programa asyncio

        * Runner context manager

        * Handling Keyboard Interruption

      * Corrotinas e Tarefas

        * Corrotinas

        * Aguardáveis

        * Criando Tarefas

        * Task Cancellation

        * Task Groups

        * Dormindo

        * Executando tarefas concorrentemente

        * Eager Task Factory

        * Protegendo contra cancelamento

        * Tempo limite

        * Primitivas de Espera

        * Executando em Threads

        * Agendando a partir de outras Threads

        * Introspecção

        * Objeto Task

      * Streams

        * StreamReader

        * StreamWriter

        * Exemplos

          * Cliente para eco TCP usando streams

          * Servidor eco TCP usando streams

          * Obtém headers HTTP

          * Registra um soquete aberto para aguardar por dados usando
            streams

      * Synchronization Primitives

        * Lock

        * Evento

        * Condição

        * Semaphore

        * BoundedSemaphore

        * Barrier

      * Subprocessos

        * Criando subprocessos

        * Constantes

        * Interagindo com subprocessos

          * Subprocesso e Threads

          * Exemplos

      * Filas

        * Queue

        * Fila de prioridade

        * Filas LIFO (último a entrar, primeiro a sair)

        * Exceções

        * Exemplos

      * Exceções

      * Laço de Eventos

        * Métodos do laço de eventos

          * Executar e interromper o laço

          * Agendando funções de retorno

          * Agendando funções de retorno atrasadas

          * Criando Futures e Tasks

          * Abrindo conexões de rede

          * Criando servidores de rede

          * Transferindo arquivos

          * Atualizando TLS

          * Observando descritores de arquivo

          * Trabalhando com objetos soquete diretamente

          * DNS

          * Trabalhando com encadeamentos

          * Sinais Unix

          * Executando código em conjuntos de threads ou processos

          * Tratando erros da API

          * Habilitando o modo de debug

          * Executando Subprocessos

        * Tratadores de função de retorno

        * Objetos Server

        * Implementações do Laço de Eventos

        * Exemplos

          * Hello World com call_soon()

          * Exibe a data atual com call_later()

          * Observa um descritor de arquivo por eventos de leitura

          * Define tratadores de sinais para SIGINT e SIGTERM

      * Futuros

        * Future Functions

        * Future Object

      * Transports and Protocols

        * Transportes

          * Transports Hierarchy

          * Base Transport

          * Read-only Transports

          * Write-only Transports

          * Transportes de datagrama

          * Transportes de Subprocesso

        * Protocolos

          * Protocolos de Base

          * Base Protocol

          * Streaming Protocols

          * Protocolos de Streaming Bufferizados

          * Protocolos de Datagramas

          * Protocolos de Subprocesso

        * Exemplos

          * TCP Echo Server

          * TCP Echo Client

          * UDP Echo Server

          * UDP Echo Client

          * Connecting Existing Sockets

          * loop.subprocess_exec() and SubprocessProtocol

      * Políticas

        * Getting and Setting the Policy

        * Policy Objects

        * Monitores de processos

        * Custom Policies

      * Suporte a plataformas

        * Todas as plataformas

        * Windows

          * Suporte para subprocesso no Windows

        * macOS

      * Extensão

        * Escrevendo um loop de evento personalizado

        * Construtores privados Future e Task

        * Task lifetime support

      * Índice da API de alto nível

        * Tarefas

        * Filas

        * Subprocessos

        * Streams

        * Sincronização

        * Exceções

      * Índice de APIs de baixo nível

        * Obtendo o laço de eventos

        * Métodos do laço de eventos

        * Transportes

        * Protocolos

        * Políticas de laço de eventos

      * Desenvolvendo com asyncio

        * Modo de Depuração

        * Concorrência e Múltiplas Threads

        * Executando código bloqueante

        * Gerando logs

        * Detect never-awaited coroutines

        * Detect never-retrieved exceptions

    * "socket" --- Interface de rede de baixo nível

      * Famílias de soquete

      * Conteúdo do módulo

        * Exceções

        * Constantes

        * Funções

          * Criação de sockets

          * Outras funções

      * Socket Objects

      * Notas sobre tempo limite de soquete

        * Timeouts and the "connect" method

        * Timeouts and the "accept" method

      * Exemplo

    * "ssl" --- TLS/SSL wrapper for socket objects

      * Functions, Constants, and Exceptions

        * Socket creation

        * Context creation

        * Exceções

        * Random generation

        * Manipulação de certificados

        * Constantes

      * SSL Sockets

      * SSL Contexts

      * Certificados

        * Certificate chains

        * CA certificates

        * Combined key and certificate

        * Self-signed certificates

      * Exemplos

        * Testing for SSL support

        * Client-side operation

        * Server-side operation

      * Notes on non-blocking sockets

      * Memory BIO Support

      * SSL session

      * Considerações de segurança

        * Best defaults

        * Manual settings

          * Verifying certificates

          * Protocol versions

          * Cipher selection

        * Multi-processing

      * TLS 1.3

    * "select" --- Waiting for I/O completion

      * "/dev/poll" Polling Objects

      * Edge and Level Trigger Polling (epoll) Objects

      * Polling Objects

      * Kqueue Objects

      * Kevent Objects

    * "selectors" --- High-level I/O multiplexing

      * Introdução

      * Classes

      * Exemplos

    * "signal" --- Set handlers for asynchronous events

      * Regras gerais

        * Execution of Python signal handlers

        * Signals and threads

      * Conteúdo do módulo

      * Exemplos

      * Note on SIGPIPE

      * Note on Signal Handlers and Exceptions

    * "mmap" --- Suporte a arquivos mapeados na memória

      * Constantes MADV_*

      * Constantes MAP_*

  * Manuseio de Dados na Internet

    * "email" --- Um e-mail e um pacote MIME manipulável

      * "email.message": Representing an email message

      * "email.parser": Parsing email messages

        * API do FeedParser

        * Parser API

        * Additional notes

      * "email.generator": Generating MIME documents

      * "email.policy": Policy Objects

      * "email.errors": Classes de Exceção e Defeito.

      * "email.headerregistry": Objetos de cabeçalho personalizados

      * "email.contentmanager": Managing MIME Content

        * Content Manager Instances

      * "email": Exemplos

      * "email.message.Message": Representing an email message using
        the "compat32" API

      * "email.mime": Criando e-mail e objetos MIME fo zero

      * "email.header": Internationalized headers

      * "email.charset": Representing character sets

      * "email.encoders": Encoders

      * "email.utils": Utilitários diversos

      * "email.iterators": Iteradores

    * "json" --- Codificador e decodificador JSON

      * Uso básico

      * Codificadores e decodificadores

      * Exceções

      * Conformidade e interoperabilidade entre padrões

        * Codificações de caracteres

        * Valores numéricos infinitos e NaN

        * Nomes repetidos dentro de um objeto

        * Valores não objeto e não vetor de nível superior

        * Limitações de implementação

      * Interface de linha de comando

        * Opções da linha de comando

    * "mailbox" --- Manipulate mailboxes in various formats

      * "Mailbox" objects

        * "Maildir" objects

        * "mbox" objects

        * "MH" objects

        * "Babyl" objects

        * "MMDF" objects

      * "Message" objects

        * "MaildirMessage" objects

        * "mboxMessage" objects

        * "MHMessage" objects

        * "BabylMessage" objects

        * "MMDFMessage" objects

      * Exceções

      * Exemplos

    * "mimetypes" --- Mapeia nomes de arquivos para tipos MIME

      * Objetos MimeTypes

    * "base64" --- Codificações de dados em Base16, Base32, Base64,
      Base85

      * Considerações de Segurança

    * "binascii" --- Converte entre binário e ASCII

    * "quopri" --- Codifica e decodifica dados MIME imprimidos entre
      aspas

  * Ferramentas de Processamento de Markup Estruturado

    * "html" --- Suporte HTML(HyperText Markup Language)

    * "html.parser" --- Simple HTML and XHTML parser

      * Example HTML Parser Application

      * "HTMLParser" Methods

      * Exemplos

    * "html.entities" --- Definições de entidades gerais de HTML

    * Módulos de Processamento de XML

      * Vulnerabilidades em XML

      * O Pacote "defusedxml"

    * API XML ElementTree

      * Tutorial

        * Árvore e elementos XML

        * Analisando XML

        * Pull API for non-blocking parsing

        * Finding interesting elements

        * Modifying an XML File

        * Building XML documents

        * Parsing XML with Namespaces

      * XPath support

        * Exemplo

        * Supported XPath syntax

      * Referência

        * Funções

      * XInclude support

        * Exemplo

      * Referência

        * Funções

        * Element Objects

        * ElementTree Objects

        * QName Objects

        * TreeBuilder Objects

        * Objetos XMLParser

        * XMLPullParser Objects

        * Exceções

    * "xml.dom" --- The Document Object Model API

      * Conteúdo do módulo

      * Objects in the DOM

        * DOMImplementation Objects

        * Objetos Node

        * Objetos NodeList

        * DocumentType Objects

        * Document Objects

        * Element Objects

        * Attr Objects

        * NamedNodeMap Objects

        * Comment Objects

        * Text and CDATASection Objects

        * Objetos ProcessingInstruction

        * Exceções

      * Conformance

        * Type Mapping

        * Accessor Methods

    * "xml.dom.minidom" --- Minimal DOM implementation

      * Objetos DOM

      * DOM Example

      * minidom e o padrão DOM

    * "xml.dom.pulldom" --- Support for building partial DOM trees

      * Objetos DOMEventStream

    * "xml.sax" --- Support for SAX2 parsers

      * SAXException Objects

    * "xml.sax.handler" --- Classes base para manipuladores de SAX

      * ContentHandler Objects

      * DTDHandler Objects

      * EntityResolver Objects

      * ErrorHandler Objects

      * LexicalHandler Objects

    * "xml.sax.saxutils" --- SAX Utilities

    * "xml.sax.xmlreader" --- Interface for XML parsers

      * XMLReader Objects

      * IncrementalParser Objects

      * Locator Objects

      * InputSource Objects

      * The "Attributes" Interface

      * The "AttributesNS" Interface

    * "xml.parsers.expat" --- Fast XML parsing using Expat

      * Objetos XMLParser

      * Exceções ExpatError

      * Exemplo

      * Content Model Descriptions

      * Expat error constants

  * Protocolos de Internet e Suporte

    * "webbrowser" --- Convenient web-browser controller

      * Browser Controller Objects

    * "wsgiref" --- Utilidades WSGI e Implementação de Referência

      * "wsgiref.util" -- Utilidades do ambiente WSGI

      * "wsgiref.headers" -- WSGI response header tools

      * "wsgiref.simple_server" -- a simple WSGI HTTP server

      * "wsgiref.validate" --- WSGI conformance checker

      * "wsgiref.handlers" -- server/gateway base classes

      * "wsgiref.types" -- WSGI types for static type checking

      * Exemplos

    * "urllib" --- Módulos de manipulação de URL

    * "urllib.request" --- Biblioteca extensível para abrir URLs

      * Objeto Request

      * OpenerDirector Objects

      * BaseHandler Objects

      * HTTPRedirectHandler Objects

      * HTTPCookieProcessor Objects

      * ProxyHandler Objects

      * HTTPPasswordMgr Objects

      * HTTPPasswordMgrWithPriorAuth Objects

      * AbstractBasicAuthHandler Objects

      * HTTPBasicAuthHandler Objects

      * ProxyBasicAuthHandler Objects

      * AbstractDigestAuthHandler Objects

      * HTTPDigestAuthHandler Objects

      * ProxyDigestAuthHandler Objects

      * HTTPHandler Objects

      * Objetos HTTPSHandler

      * FileHandler Objects

      * DataHandler Objects

      * FTPHandler Objects

      * CacheFTPHandler Objects

      * Objetos UnknownHandler

      * HTTPErrorProcessor Objects

      * Exemplos

      * Legacy interface

      * "urllib.request" Restrictions

    * "urllib.response" --- Response classes used by urllib

    * "urllib.parse" --- Analisa URLs para componentes

      * Análise de URL

      * URL parsing security

      * Analisando bytes codificados em ASCII

      * Structured Parse Results

      * URL Quoting

    * "urllib.error" --- Classes de exceção levantadas por
      urllib.request

    * "urllib.robotparser" ---  Parser for robots.txt

    * "http" --- módulos HTTP

      * códigos de status HTTP

      * HTTP status category

      * HTTP methods

    * "http.client" --- cliente de protocolo HTTP

      * Objetos de HTTPConnection

      * Objetos HTTPResponse

      * Exemplos

      * HTTPMessage Objects

    * "ftplib" --- FTP protocol client

      * Referência

        * FTP objects

        * FTP_TLS objects

        * Module variables

    * "poplib" --- Cliente de protocolo POP3

      * Objetos POP3

      * Exemplo POP3

    * "imaplib" --- IMAP4 protocol client

      * Objetos IMAP4

      * Exemplo IMAP4

    * "smtplib" --- SMTP protocol client

      * Objetos SMTP

      * Exemplo SMTP

    * "uuid" --- UUID objects according to **RFC 4122**

      * Uso da linha de comando

      * Exemplo

      * Command-Line Example

    * "socketserver" --- A framework for network servers

      * Server Creation Notes

      * Objetos Server

      * Request Handler Objects

      * Exemplos

        * "socketserver.TCPServer" Example

        * Exemplo "socketserver.UDPServer"

        * Asynchronous Mixins

    * "http.server" --- servidores HTTP

      * Considerações de segurança

    * "http.cookies" --- Gerenciadores de estado HTTP

      * Objetos Cookie

      * Objetos Morsel

      * Exemplo

    * "http.cookiejar" --- Cookie handling for HTTP clients

      * CookieJar and FileCookieJar Objects

      * FileCookieJar subclasses and co-operation with web browsers

      * Objeto CookiePolicy

      * DefaultCookiePolicy Objects

      * Objetos Cookie

      * Exemplos

    * "xmlrpc" --- Módulos de servidor e cliente XMLRPC

    * "xmlrpc.client" --- Cliente XML-RPC

      * Objetos ServerProxy

      * Objetos DateTime

      * Objetos Binários

      * Objetos Fault

      * Objeto ProtocolError

      * Objetos MultiCall

      * Convenience Functions

      * Exemplo de uso do cliente

      * Example of Client and Server Usage

    * "xmlrpc.server" --- Servidores XML-RPC básicos

      * Objetos de SimpleXMLRPCServer

        * Exemplo de SimpleXMLRPCServer

      * CGIXMLRPCRequestHandler

      * Documentando servidor XMLRPC

      * Objetos de DocXMLRPCServer

      * DocCGIXMLRPCRequestHandler

    * "ipaddress" --- IPv4/IPv6 manipulation library

      * Convenience factory functions

      * IP Addresses

        * Endereço de objetos

        * Conversion to Strings and Integers

        * Operadores

          * Comparison operators

          * Operadores aritméticos

      * IP Network definitions

        * Prefix, net mask and host mask

        * Objetos Network

        * Operadores

          * Logical operators

          * Iteração

          * Redes como contêineres de endereços

      * Interface objects

        * Operadores

          * Logical operators

      * Other Module Level Functions

      * Custom Exceptions

  * Serviços Multimídia

    * "wave" --- Read and write WAV files

      * Objetos Wave_read

      * Objetos Wave_write

    * "colorsys" --- Conversões entre sistemas de cores

  * Internacionalização

    * "gettext" --- Serviços de internacionalização multilíngues

      * API do GNU **gettext**

      * API baseada em classe

        * A classe "NullTranslations"

        * A classe "GNUTranslations"

        * Suporte a catálogo de mensagens do Solaris

        * O construtor Catalog

      * Internacionalizando seus programas e módulos

        * Localizando seu módulo

        * Localizando sua aplicação

        * Alterando os idiomas durante o uso

        * Traduções adiadas

      * Reconhecimentos

    * "locale" --- Serviços de internacionalização

      * Histórico, detalhes, dicas, dicas e advertências

      * Para escritores de extensão e programas que incorporam Python

      * Acesso a catálogos de mensagens

  * Frameworks de programa

    * "turtle" --- Gráficos Tartaruga

      * Introdução

      * Tutorial

        * Iniciando um ambiente de desenvolvimento da tartaruga

        * Desenho básico

          * Controle da Caneta

          * A posição da tartaruga

        * Criação de padrões algorítmicos

      * Como fazer...

        * Comece o mais rápido possível

        * Use o "identificador" do módulo "turtle"

        * Usar o módulo gráfico de tartaruga dentro de um script
          (código específico)

        * Use o módulo gráficos da tartaruga orientado a objetos

      * Referência Gráficos de Tartaruga

        * Métodos de Turtle

        * Métodos de TurtleScreen/Screen

      * Métodos de RawTurtle/Turtle e funções correspondentes

        * Movimentos de Turtle

        * Fala o estado de Turtle

        * Configurações de medida

        * Controle da Caneta

          * Estado do Desenho

          * Controle da Cor

          * Preenchimento

          * Mais sobre o Controle do Desenho

        * Estado da tartaruga

          * Visibilidade

          * Aparência

        * Eventos Utilizados

        * Métodos Especiais da Tartaruga

        * Formas compostas

      * Methods of TurtleScreen/Screen and corresponding functions

        * Controle da Janela

        * Controle da animação

        * Usando os eventos de tela

        * Métodos de entrada

        * Configurações e métodos especiais

        * Methods specific to Screen, not inherited from TurtleScreen

      * Classes Públicas

      * Explanação

      * Ajuda e Configuração

        * Como usar a Ajuda

        * Translation of docstrings into different languages

        * How to configure Screen and Turtles

      * "turtledemo" --- Scripts de Demonstração

      * Modificações desde a versão do Python 2.6

      * Modificações desde a versão do Python 3.0

    * "cmd" --- Suporte para interpretadores de comando orientado a
      linhas

      * Objetos Cmd

      * Exemplo do Cmd

    * "shlex" --- Análise léxica simples

      * shlex Objects

      * Regras de análise

      * Improved Compatibility with Shells

  * Interfaces Gráficas de Usuário com Tk

    * "tkinter" --- Interface Python para Tcl/Tk

      * Arquitetura

      * Módulos Tkinter

      * Preservador de vida Tkinter

        * Um programa Olá Mundo

        * Conceitos importantes do Tk

        * Entendendo como Tkinter envolve Tcl/Tk

        * Como é que eu...? Que opção faz...?

        * Navegando no Manual de Referência Tcl/Tk

      * Modelo de threading

      * Referência Útil

        * Opções de Definição

        * O Empacotador

        * Opções do Empacotador

        * Acoplando Variáveis de Widgets

        * O Gerenciador de Janela

        * Opções de Tipos de Dados do Tk

        * Ligações e Eventos

        * O Parâmetro index

        * Imagens

      * Tratadores de arquivos

    * "tkinter.colorchooser" --- Diálogo de escolha de cor

    * "tkinter.font" --- Tkinter font wrapper

    * Diálogos Tkinter

      * "tkinter.simpledialog" --- Diálogos de entrada padrão do
        Tkinter

      * "tkinter.filedialog" --- Caixas de diálogo de seleção de
        arquivo

        * Caixas de diálogo nativos de carregar/salvar

      * "tkinter.commondialog" --- Modelos de janela de diálogo

    * "tkinter.messagebox" --- Prompts de mensagem do Tkinter

    * "tkinter.scrolledtext" --- Widget Scrolled Text

    * "tkinter.dnd" --- Suporte para arrastar e soltar

    * : mod: *tkinter.ttk* --- Widgets temáticos do Tk

      * Usando Ttk

      * Ttk Widgets

      * Ferramenta

        * Opções padrões

        * Opções de ferramenta rolável

        * Opções de rótulo

        * Opções de compatibilidade

        * Widget States

        * ttk.Widget

      * Combobox

        * Opções

        * Virtual events

        * ttk.Combobox

      * Spinbox

        * Opções

        * Virtual events

        * ttk.Spinbox

      * Notebook

        * Opções

        * Tab Options

        * Tab Identifiers

        * Virtual Events

        * ttk.Notebook

      * Progressbar

        * Opções

        * ttk.Progressbar

      * Separator

        * Opções

      * Sizegrip

        * Platform-specific notes

        * Bugs

      * Treeview

        * Opções

        * Item Options

        * Tag Options

        * Column Identifiers

        * Virtual Events

        * ttk.Treeview

      * Ttk Styling

        * Layouts

    * "tkinter.tix" --- Extension widgets for Tk

      * Using Tix

      * Tix Widgets

        * Widgets básicos

        * Seletores de arquivo

        * Hierarchical ListBox

        * Tabular ListBox

        * Manager Widgets

        * Image Types

        * Miscellaneous Widgets

        * Form Geometry Manager

      * Comandos Tix

    * IDLE

      * Menus

        * Menu Arquivo (Console e Editor)

        * Edit menu (Shell and Editor)

        * Format menu (Editor window only)

        * Run menu (Editor window only)

        * Shell menu (Shell window only)

        * Debug menu (Shell window only)

        * Options menu (Shell and Editor)

        * Window menu (Shell and Editor)

        * Help menu (Shell and Editor)

        * Context menus

      * Editing and Navigation

        * Editor windows

        * Teclas de atalho

        * Automatic indentation

        * Busca e Substituição

        * Completions

        * Calltips

        * Code Context

        * Shell window

        * Text colors

      * Startup and Code Execution

        * Uso na linha de comando

        * Startup failure

        * Running user code

        * User output in Shell

        * Developing tkinter applications

        * Running without a subprocess

      * Help and Preferences

        * Help sources

        * Setting preferences

        * IDLE on macOS

        * Extensions

      * idlelib

  * Ferramentas de Desenvolvimento

    * "typing" --- Suporte para dicas de tipo

      * PEPs Relevantes

      * Apelidos de tipo

      * NewType

      * Anotações de objetos chamáveis

      * Genéricos

      * Anotando tuplas

      * O tipo de objetos de classe

      * Tipos genéricos definidos pelo usuário

      * O tipo "Any"

      * Subtipagem nominal vs estrutural

      * Conteúdo do módulo

        * Tipos primitivos especiais

          * Tipos especiais

          * Formas especiais

          * Criando tipos genéricos e apelidos de tipo

          * Outras diretivas especiais

        * Protocolos

        * ABCs para trabalhar com IO

        * Funções e decoradores

        * Introspection helpers

        * Constante

        * Deprecated aliases

          * Aliases to built-in types

          * Aliases to types in "collections"

          * Aliases to other concrete types

          * Aliases to container ABCs in "collections.abc"

          * Aliases to asynchronous ABCs in "collections.abc"

          * Aliases to other ABCs in "collections.abc"

          * Aliases to "contextlib" ABCs

      * Cronograma de Descontinuação dos Principais Recursos

    * "pydoc" --- Gerador de documentação e sistema de ajuda online

    * Modo de Desenvolvimento do Python

      * Efeitos do Modo de Desenvolvimento do Python

      * Exemplo de ResourceWarning

      * Exemplo de erro de descritor de arquivo inválido

    * "doctest" --- Teste exemplos interativos de Python

      * Uso simples: verificando exemplos em Docstrings

      * Utilização comum: Verificando exemplos em um arquivo de texto

      * Como funciona

        * Which Docstrings Are Examined?

        * How are Docstring Examples Recognized?

        * What's the Execution Context?

        * What About Exceptions?

        * Flags opcionais

        * Directives

        * Avisos

      * Basic API

      * API do Unittest

      * Advanced API

        * DocTest Objects

        * Example Objects

        * DocTestFinder objects

        * DocTestParser objects

        * DocTestRunner objects

        * OutputChecker objects

      * Depuração

      * Soapbox

    * "unittest" --- Framework de Testes Unitários

      * Exemplo Básico

      * Interface de Linha de Comando

        * Opções de linha de comando

      * Test Discovery

      * Organizando código teste

      * Reutilizando códigos de teste antigos

      * Ignorando testes e falhas esperadas

      * Distinguindo iterações de teste utilizando subtestes

      * Classes e funções

        * Casos de teste

        * Grouping tests

        * Carregando e executando testes

          * load_tests Protocol

      * Classes e Módulos de Definição de Contexto

        * setUpClass and tearDownClass

        * setUpModule and tearDownModule

      * Tratamento de sinal

    * "unittest.mock" --- biblioteca de objeto mock

      * Guia Rápido

      * A classe Mock

        * Fazendo chamadas

        * Deletando Atributos

        * Nomes de Mock e o atributo *name*

        * Anexando Mocks como Atributos

      * Os criadores de patches

        * patch

        * patch.object

        * patch.dict

        * patch.multiple

        * métodos do patch: *start* e *stop*

        * patch de embutidos

        * TEST_PREFIX

        * Aninhando Decoradores Patch

        * Onde fazer patch

        * Patching Descriptors and Proxy Objects

      * MagicMock and magic method support

        * Simulando Métodos Mágicos

        * Magic Mock

      * Ajudantes

        * sentinel

        * DEFAULT

        * chamada

        * create_autospec

        * ANY

        * FILTER_DIR

        * mock_open

        * Especificação automática

        * Vedando mocks

    * "unittest.mock" --- primeiros passos

      * Usando Mock

        * Métodos de aplicação de patches em Mock

        * Mock for Method Calls on an Object

        * Mocking Classes

        * Nomeando os mocks

        * Tracking all Calls

        * Setting Return Values and Attributes

        * Raising exceptions with mocks

        * Side effect functions and iterables

        * Mocking asynchronous iterators

        * Mocking asynchronous context manager

        * Creating a Mock from an Existing Object

        * Using side_effect to return per file content

      * Patch Decorators

      * Further Examples

        * Mocking chained calls

        * Partial mocking

        * Mocking a Generator Method

        * Applying the same patch to every test method

        * Mocking Unbound Methods

        * Checking multiple calls with mock

        * Coping with mutable arguments

        * Nesting Patches

        * Mocking a dictionary with MagicMock

        * Mock subclasses and their attributes

        * Mocking imports with patch.dict

        * Tracking order of calls and less verbose call assertions

        * More complex argument matching

    * 2to3 --- Tradução Automatizada de Código Python 2 para 3

      * Usando o 2to3

      * Fixadores

      * "lib2to3" --- biblioteca do 2to3

    * "test" --- Pacote de Testes de Regressão do Python

      * Escrever testes unitários para o pacote "test"

      * Executando testes usando a interface de linha de comando

    * "test.support" --- Utilitários para o conjunto de teste do
      Python

    * "test.support.socket_helper" --- Utilities for socket tests

    * "test.support.script_helper" --- Utilities for the Python
      execution tests

    * "test.support.bytecode_helper" --- Ferramentas de suporte para
      testar a geração correta de bytecode

    * "test.support.threading_helper" --- Utilities for threading
      tests

    * "test.support.os_helper" --- Utilities for os tests

    * "test.support.import_helper" --- Utilities for import tests

    * "test.support.warnings_helper" --- Utilities for warnings tests

  * Depuração e perfilamento

    * Tabela de eventos de auditoria

    * "bdb" --- Debugger framework

    * "faulthandler" --- Dump the Python traceback

      * Dumping the traceback

      * Fault handler state

      * Dumping the tracebacks after a timeout

      * Dumping the traceback on a user signal

      * Issue with file descriptors

      * Exemplo

    * "pdb" --- O Depurador do Python

      * Comandos de depuração

    * The Python Profilers

      * Introduction to the profilers

      * Instant User's Manual

      * "profile" and "cProfile" Module Reference

      * The "Stats" Class

      * What Is Deterministic Profiling?

      * Limitations

      * Calibration

      * Using a custom timer

    * "timeit" --- Measure execution time of small code snippets

      * Exemplos básicos

      * Python Interface

      * Interface de Linha de Comando

      * Exemplos

    * "trace" --- Rastreia ou acompanha a execução de instruções
      Python

      * Uso da linha de comando

        * Opções principais

        * Modificadores

        * Filtros

      * Interface programática

    * "tracemalloc" --- Trace memory allocations

      * Exemplos

        * Exibe o top 10

        * Compute differences

        * Get the traceback of a memory block

        * Pretty top

          * Record the current and peak size of all traced memory
            blocks

      * API

        * Funções

        * DomainFilter

        * Filter

        * Frame

        * Snapshot

        * Statistic

        * StatisticDiff

        * Trace

        * Traceback

  * Empacotamento e Distribuição de Software

    * "ensurepip" --- Inicialização do instalador do "pip"

      * Interface de linha de comando

      * API do módulo

    * "venv"--- Criação de ambientes virtuais

      * Criando ambientes virtuais

      * Como funcionam os venvs

      * API

      * Um exemplo de extensão de "EnvBuilder"

    * "zipapp" --- Manage executable Python zip archives

      * Basic Example

      * Interface de Linha de Comando

      * API Python

      * Exemplos

      * Especificando o interpretador

      * Creating Standalone Applications with zipapp

        * Caveats

      * The Python Zip Application Archive Format

  * Serviços de Tempo de Execução Python

    * "sys" --- Parâmetros e funções específicas do sistema

    * "sys.monitoring" --- Monitoramento de eventos de execução

      * Identificadores de ferramenta

        * Registro e uso de ferramentas

      * Eventos

        * Eventos locais

        * Eventos auxiliares

        * Outros eventos

        * O evento STOP_ITERATION

      * Ativação e desativação de eventos

        * Definir eventos globalmente

        * Eventos por objeto código

        * Desativação de eventos

      * Registro de funções de retorno de chamada

        * Argumentos da função de retorno de chamada

    * "sysconfig" --- Fornece acesso às informações de configuração do
      Python

      * Variáveis de configuração

      * Caminhos de instalação

      * Esquema de usuário

        * "posix_user"

        * "nt_user"

        * "osx_framework_user"

      * Esquema de home

        * "posix_home"

      * Esquema de prefixo

        * "posix_prefix"

        * "nt"

      * Funções de caminho de instalação

      * Outras funções

      * Usando o módulo "sysconfig" como um Script

    * "builtins" --- Objetos embutidos

    * "__main__" --- Ambiente de código principal

      * "__name__ == '__main__'"

        * O que é o "ambiente de código principal"?

        * Uso idiomático

        * Considerações sobre pacotes

      * "__main__.py" em pacotes Python

        * Uso idiomático

      * "import __main__"

    * "warnings" --- Controle de avisos

      * Categorias de avisos

      * O filtro de avisos

        * Describing Warning Filters

        * Filtro de avisos padrão

        * Overriding the default filter

      * Temporarily Suppressing Warnings

      * Testing Warnings

      * Updating Code For New Versions of Dependencies

      * Available Functions

      * Available Context Managers

    * "dataclasses" --- Data Classes

      * Conteúdo do módulo

      * Processamento pós-inicialização

      * Variáveis de classe

      * Variáveis de inicialização apenas

      * Frozen instances

      * Herança

      * Re-ordering of keyword-only parameters in "__init__()"

      * Funções padrão de fábrica

      * Valores padrão mutáveis

      * Descriptor-typed fields

    * "contextlib" --- Utilities for "with"-statement contexts

      * Utilitários

      * Exemplos e receitas

        * Supporting a variable number of context managers

        * Catching exceptions from "__enter__" methods

        * Cleaning up in an "__enter__" implementation

        * Replacing any use of "try-finally" and flag variables

        * Using a context manager as a function decorator

      * Single use, reusable and reentrant context managers

        * Reentrant context managers

        * Gerenciadores de contexto reutilizáveis

    * "abc" --- Classes Base Abstratas

    * "atexit" --- Manipuladores de Saída

      * Exemplo do "atexit"

    * "traceback" --- Print or retrieve a stack traceback

      * "TracebackException" Objects

      * "StackSummary" Objects

      * "FrameSummary" Objects

      * Exemplos de Traceback

    * "__future__" --- Definições de instruções de future

      * Conteúdo do módulo

    * "gc" --- Interface para o coletor de lixo

    * "inspect" --- Inspeciona objetos vivos

      * Tipos e membros

      * Retrieving source code

      * Introspecting callables with the Signature object

      * Classes e funções

      * A pilha to interpretador

      * Fetching attributes statically

      * Current State of Generators, Coroutines, and Asynchronous
        Generators

      * Code Objects Bit Flags

      * Buffer flags

      * Interface de linha de comando

    * "site" --- Gancho de configuração específico do site

      * "sitecustomize"

      * "usercustomize"

      * Configuração Readline

      * Conteúdo do módulo

      * Interface de linha de comando

  * Interpretadores Python Personalizados

    * "code" --- Classes Bases do Interpretador

      * Objetos de Interpretador Interativo

      * Objetos de Console Interativos

    * "codeop" --- Compila código Python

  * Importando módulos

    * "zipimport" --- Import modules from Zip archives

      * zipimporter Objects

      * Exemplos

    * "pkgutil" --- Utilitário de extensão de pacote

    * "modulefinder" --- Procura módulos usados por um script

      * Exemplo de uso de "ModuleFinder"

    * "runpy" --- Localizando e executando módulos Python

    * "importlib" --- The implementation of "import"

      * Introdução

      * Funções

      * "importlib.abc" -- Abstract base classes related to import

      * "importlib.machinery" -- Importers and path hooks

      * "importlib.util" -- Utility code for importers

      * Exemplos

        * Importing programmatically

        * Checando se o módulo pode ser importado

        * Importa o arquivo de origem diretamente

        * Implementing lazy imports

        * Setting up an importer

        * Approximating "importlib.import_module()"

    * "importlib.resources" -- Leitura, abertura e acesso aos recursos
      de pacote

      * Funções descontinuadas

    * "importlib.resources.abc" -- Classes base abstratas para
      recursos

    * "importlib.metadata" -- Accessing package metadata

      * Visão Geral

      * API funcional

        * Entry points

        * Distribution metadata

        * Distribution versions

        * Distribution files

        * Distribution requirements

        * Mapping import to distribution packages

      * Distributions

      * Distribution Discovery

      * Extending the search algorithm

    * The initialization of the "sys.path" module search path

      * Ambientes virtuais

      * _pth files

      * Embedded Python

  * Serviços da Linguagem Python

    * "ast" --- Árvores de Sintaxe Abstrata

      * Gramática Abstrata

      * Classes de nó

        * Root nodes

        * Literais

        * Variáveis

        * Expressões

          * Subscrição

          * Compreensões

        * Instruções

          * Importações

        * Control flow

        * Pattern matching

        * Type parameters

        * Function and class definitions

        * Async and await

      * Auxiliares de "ast"

      * Compiler Flags

      * Uso da linha de comando

    * "symtable" --- Acesso a tabela de símbolos do compilador

      * Generating Symbol Tables

      * Examining Symbol Tables

    * "token" --- Constantes usadas com árvores de análises do Python

    * "keyword" --- Testando palavras reservadas do Python

    * "tokenize" --- Tokenizer for Python source

      * Tokenizando entradas

      * Uso da linha de comando

      * Exemplos

    * "tabnanny" --- Detecção de recuo ambíguo

    * "pyclbr" --- Suporte a navegador de módulos do Python

      * Objetos Função

      * Objetos de Class

    * "py_compile" --- Compila arquivos fonte do Python

      * Interface de Linha de Comando

    * "compileall" --- Compilar bibliotecas do Python para bytecode

      * Uso na linha de comando

      * Funções públicas

    * "dis" --- Disassembler de bytecode do Python

      * Command-line interface

      * Analise do Bytecode

      * Analysis functions

      * Python Bytecode Instructions

      * Opcode collections

    * "pickletools" --- Ferramentas para desenvolvedores pickle

      * Uso na linha de comando

        * Opções da linha de comando

      * Interface programática

  * Serviços Específicos do MS Windows

    * "msvcrt" --- Rotinas úteis do tempo de execução do MS VC++

      * Operações com arquivos

      * E/S de console

      * Outras funções

    * "winreg" -- Registro de acesso do Windows

      * Funções

      * Constantes

        * HKEY_* Constants

        * Access Rights

          * 64-bit Specific

        * Value Types

      * Registry Handle Objects

    * "winsound" --- Interface de reprodução de som para Windows

  * Serviços Específicos Unix

    * "posix" --- As chamadas de sistema mais comuns do POSIX

      * Suporte a arquivos grandes

      * Conteúdo notável do módulo

    * "pwd" --- A senha do banco de dados

    * "grp" --- The group database

    * "termios" --- Controle de tty no estilo POSIX

      * Exemplo

    * "tty" --- Funções de controle de terminal

    * "pty" --- Utilitários de pseudoterminal

      * Exemplo

    * "fcntl" --- as chamadas de sistema "fcntl" e "ioctl"

    * "resource" --- Resource usage information

      * Resource Limits

      * Resource Usage

    * "syslog" --- Rotinas da biblioteca syslog do Unix

      * Exemplos

        * Exemplo simples

  * Interface de linha de comando (CLI) de módulos

  * Módulos Substituídos

    * "aifc" --- Lê e escreve arquivos AIFF e AIFC

    * "audioop" --- Manipulando dados de áudio original

    * "cgi" --- Suporte a Common Gateway Interface

      * Introdução

      * Usando o módulo cgi

      * Interface de nível mais alto

      * Funções

      * Caring about security

      * Installing your CGI script on a Unix system

      * Testing your CGI script

      * Debugging CGI scripts

      * Common problems and solutions

    * "cgitb" --- Gerenciador de traceback (situação da pilha de
      execução) para roteiros de CGI

    * "chunk" --- Read IFF chunked data

    * "crypt" --- Function to check Unix passwords

      * Hashing Methods

      * Atributos do módulo

      * Module Functions

      * Exemplos

    * "imghdr" --- Determina o tipo de uma imagem

    * "mailcap" --- Mailcap file handling

    * "msilib" --- Read and write Microsoft Installer files

      * Objetos de banco de dados.

      * View Objects

      * Summary Information Objects

      * Record Objects

      * Erros

      * CAB Objects

      * Objetos Directory

      * Recursos

      * Classes GUI

      * Precomputed tables

    * "nis" --- Interface para NIS da Sun (Yellow Pages)

    * "nntplib" --- NNTP protocol client

      * NNTP Objects

        * Attributes

        * Métodos

      * Funções utilitárias

    * "optparse" --- Parser for command line options

      * Background

        * Terminology

        * What are options for?

        * What are positional arguments for?

      * Tutorial

        * Understanding option actions

        * The store action

        * Handling boolean (flag) options

        * Outras Ações

        * Default values

        * Generating help

          * Grouping Options

        * Printing a version string

        * How "optparse" handles errors

        * Putting it all together

      * Reference Guide

        * Creating the parser

        * Populating the parser

        * Defining options

        * Option attributes

        * Standard option actions

        * Standard option types

        * Análise de argumentos

        * Querying and manipulating your option parser

        * Conflicts between options

        * Cleanup

        * Other methods

      * Option Callbacks

        * Defining a callback option

        * How callbacks are called

        * Raising errors in a callback

        * Callback example 1: trivial callback

        * Callback example 2: check option order

        * Callback example 3: check option order (generalized)

        * Callback example 4: check arbitrary condition

        * Callback example 5: fixed arguments

        * Callback example 6: variable arguments

      * Extending "optparse"

        * Adding new types

        * Adding new actions

      * Exceções

    * "ossaudiodev" --- Access to OSS-compatible audio devices

      * Audio Device Objects

      * Mixer Device Objects

    * "pipes" --- Interface to shell pipelines

      * Objetos Template

    * "sndhdr" --- Determina o tipo de arquivos de som

    * "spwd" --- O banco de dados de senhas shadow

    * "sunau" --- Lê e escreve arquivos AU da Sun

      * Objetos AU_read

      * Objetos AU_write

    * "telnetlib" --- cliente Telnet

      * Objetos Telnet

      * Telnet Example

    * "uu" --- Codifica e decodifica arquivos uuencode

    * "xdrlib" --- Encode and decode XDR data

      * Objetos Packer

      * Objetos Unpacker

      * Exceções

  * Considerações de segurança

* Estendendo e Incorporando o Interpretador Python

  * Ferramentas de terceiros recomendadas

  * Criando extensões sem ferramentas de terceiros

    * 1. Estendendo Python com C ou C++

      * 1.1. Um Exemplo Simples

      * 1.2. Intermezzo: Errors and Exceptions

      * 1.3. Back to the Example

      * 1.4. The Module's Method Table and Initialization Function

      * 1.5. Compilation and Linkage

      * 1.6. Calling Python Functions from C

      * 1.7. Extracting Parameters in Extension Functions

      * 1.8. Keyword Parameters for Extension Functions

      * 1.9. Building Arbitrary Values

      * 1.10. Contagens de referências

        * 1.10.1. Reference Counting in Python

        * 1.10.2. Ownership Rules

        * 1.10.3. Thin Ice

        * 1.10.4. NULL Pointers

      * 1.11. Writing Extensions in C++

      * 1.12. Providing a C API for an Extension Module

    * 2. Definindo Tipos de Extensão: Tutorial

      * 2.1. O básico

      * 2.2. Adicionando dados e métodos ao exemplo básico

      * 2.3. Fornecendo controle mais preciso sobre atributos de dados

      * 2.4. Apoiando a coleta de lixo cíclica

      * 2.5. Criando subclasses de outros tipos

    * 3. Defining Extension Types: Assorted Topics

      * 3.1. Finalization and De-allocation

      * 3.2. Object Presentation

      * 3.3. Attribute Management

        * 3.3.1. Generic Attribute Management

        * 3.3.2. Type-specific Attribute Management

      * 3.4. Object Comparison

      * 3.5. Abstract Protocol Support

      * 3.6. Weak Reference Support

      * 3.7. More Suggestions

    * 4. Construindo extensões C e C++

      * 4.1. Construindo extensões C e C ++ com setuptools

    * 5. Construindo Extensões C e C++ no Windows

      * 5.1. Uma abordagem de livro de receitas

      * 5.2. Diferenças entre o Unix e o Windows

      * 5.3. Usando DLLs na prática

  * Incorporando o tempo de execução do CPython em uma aplicação maior

    * 1. Incorporando o Python numa Outra Aplicação

      * 1.1. Very High Level Embedding

      * 1.2. Beyond Very High Level Embedding: An overview

      * 1.3. Pure Embedding

      * 1.4. Extending Embedded Python

      * 1.5. Embedding Python in C++

      * 1.6. Compiling and Linking under Unix-like systems

* Manual de referência da API Python/C

  * Introdução

    * Padrões de codificação

    * Arquivos de inclusão

    * Macros úteis

    * Objetos, tipos e contagens de referências

      * Contagens de referências

        * Detalhes da contagem de referências

      * Tipos

    * Exceções

    * Incorporando Python

    * Compilações de depuração

  * Estabilidade da API C

    * API C Instável

    * Interface Binária de Aplicação Estável

      * API C Limitada

      * ABI Estável

      * Escopo e Desempenho da API Limitada

      * Limitações da API Limitada

    * Considerações da plataforma

    * Conteúdo da API Limitada

  * A camada de Mais Alto Nível

  * Contagem de Referências

  * Manipulando Exceções

    * Impressão e limpeza

    * Lançando exceções

    * Emitindo advertências

    * Consultando o indicador de erro

    * Tratamento de sinal

    * Classes de exceção

    * Objeto Exceção

    * Objetos de exceção Unicode

    * Controle de recursão

    * Exceções Padrão

    * Categorias de aviso padrão

  * Utilitários

    * Utilitários do Sistema Operacional

    * System Functions

    * Process Control

    * Importando módulos

    * Suporte a *marshalling* de dados

    * Análise de argumentos e construção de valores

      * Análise de argumentos

        * Strings and buffers

        * Números

        * Outros objetos

        * Funções da API

      * Construindo valores

    * Conversão e formação de strings

    * API do PyHash

    * Reflexão

    * Registro de codec e funções de suporte

      * API de pesquisa de codec

      * API de registro de tratamentos de erros de decodificação
        Unicode

    * Support for Perf Maps

  * Camada de Objetos Abstratos

    * Protocolo de objeto

    * Protocolo de chamada

      * O protocolo *tp_call*

      * O protocolo vectorcall

        * Controle de recursão

        * API de suporte à chamada de vetores

      * API de chamada de objetos

      * API de suporte a chamadas

    * Protocolo de número

    * Protocolo de sequência

    * Protocolo de mapeamento

    * Protocolo Iterador

    * Protocolo de Buffer

      * Estrutura de Buffer

      * Tipos de solicitação do buffer

        * campos independentes do pedido

        * apenas em formato

        * forma, avanços, suboffsets

        * requisições contíguas

        * requisições compostas

      * Vetores Complexos

        * Estilo NumPy: forma e avanços

        * Estilo-PIL: forma, avanços e suboffsets

      * Funções relacionadas ao Buffer

    * Protocolo de Buffer Antigo

  * Camada de Objetos Concretos

    * Objetos Fundamentais

      * Objetos tipo

        * Creating Heap-Allocated Types

      * O Objeto "None"

    * Objetos Numéricos

      * Objetos Inteiros

      * Objetos Booleanos

      * Objetos de ponto flutuante

        * Pack and Unpack functions

          * Pack functions

          * Unpack functions

      * Objetos de números complexos

        * Números complexos como estruturas C.

        * Números complexos como objetos Python

    * Objetos Sequência

      * Objetos Bytes

      * Objetos Byte Array

        * Macros para verificação de tipo

        * Funções diretas da API

        * Macros

      * Objetos Unicode e Codecs

        * Unicode Objects

          * Unicode Type

          * Unicode Character Properties

          * Creating and accessing Unicode strings

          * Locale Encoding

          * File System Encoding

          * wchar_t Support

        * Built-in Codecs

          * Generic Codecs

          * UTF-8 Codecs

          * UTF-32 Codecs

          * UTF-16 Codecs

          * UTF-7 Codecs

          * Unicode-Escape Codecs

          * Raw-Unicode-Escape Codecs

          * Latin-1 Codecs

          * ASCII Codecs

          * Character Map Codecs

          * MBCS codecs for Windows

          * Methods & Slots

        * Methods and Slot Functions

      * Objeto tupla

      * Objetos sequência de estrutura

      * Objeto List

    * Coleções

      * Objetos dicionários

      * Objeto Set

    * Objetos Função

      * Objetos Função

      * Objetos de Método de Instância

      * Objetos método

      * Objeto célula

      * Objetos código

      * Informação adicional

    * Outros Objetos

      * Objetos arquivos

      * Objetos do Módulo

        * Inicializando módulos C

          * inicialização de fase única

          * Inicialização multifásica

          * Funções de criação de módulo de baixo nível

          * Support functions

        * Pesquisa por módulos

      * Objetos Iteradores

      * Objetos Descritores

      * Objetos Slice

        * Objeto Ellipsis

      * Objetos MemoryView

      * Objetos de referência fraca

      * Capsules

      * Objetos Frame

        * Internal Frames

      * Objetos Geradores

      * Objetos corrotina

      * Objetos de variáveis ​​de contexto

      * Objetos DateTime

      * Objetos de indicação de tipos

  * Inicialização, Finalização e Threads

    * Antes da Inicialização do Python

    * Variáveis de configuração global

    * Inicializando e encerrando o interpretador

    * Process-wide parameters

    * Thread State and the Global Interpreter Lock

      * Releasing the GIL from extension code

      * Non-Python created threads

      * Cuidados com o uso de fork()

      * High-level API

      * Low-level API

    * Sub-interpreter support

      * A Per-Interpreter GIL

      * Bugs and caveats

    * Notificações assíncronas

    * Profiling and Tracing

    * Advanced Debugger Support

    * Thread Local Storage Support

      * Thread Specific Storage (TSS) API

        * Alocação dinâmica

        * Métodos

      * Thread Local Storage (TLS) API

  * Configuração de Inicialização do Python

    * Exemplo

    * PyWideStringList

    * PyStatus

    * PyPreConfig

    * Preinitialize Python with PyPreConfig

    * PyConfig

    * Initialization with PyConfig

    * Isolated Configuration

    * Configuração do Python

    * Python Path Configuration

    * Py_RunMain()

    * Py_GetArgcArgv()

    * Multi-Phase Initialization Private Provisional API

  * Gerenciamento de Memória

    * Visão Geral

    * Allocator Domains

    * Raw Memory Interface

    * Interface da Memória

    * Alocadores de objeto

    * Alocadores de memória padrão

    * Alocadores de memória

    * Debug hooks on the Python memory allocators

    * The pymalloc allocator

      * Customize pymalloc Arena Allocator

    * tracemalloc C API

    * Exemplos

  * Suporte a implementação de Objetos

    * Alocando Objetos na Pilha

    * Estruturas Comuns de Objetos

      * Base object types and macros

      * Implementing functions and methods

      * Accessing attributes of extension types

        * Member flags

        * Member types

        * Defining Getters and Setters

    * Objetos tipo

      * Referências rápidas

        * "slots tp"

        * sub-slots

        * slot typedefs

      * PyTypeObject Definition

      * PyObject Slots

      * PyVarObject Slots

      * PyTypeObject Slots

      * Static Types

      * Heap Types

    * Number Object Structures

    * Mapping Object Structures

    * Sequence Object Structures

    * Buffer Object Structures

    * Async Object Structures

    * Slot Type typedefs

    * Exemplos

    * Suporte a Coleta Cíclica de Lixo

      * Controlando o estado do coletor de lixo

      * Querying Garbage Collector State

  * API e Versionamento de ABI

* Instalando módulos Python

  * Termos chave

  * Uso básico

  * Como eu ...?

    * ... instalo "pip" em versões do Python anteriores ao Python 3.4?

    * ... instalo pacotes apenas para o usuário atual?

    * ... instalo pacotes científicos do Python?

    * ... trabalho com várias versões do Python instaladas em
      paralelo?

  * Problemas comuns de instalação

    * Instalando no sistema Python no Linux

    * Pip não instalado

    * Instalando extensões binárias

* Python HOWTOs

  * Portando módulos de extensão para o Python 3

  * Programação em Curses com Python

    * O que é curses?

      * O módulo curses de Python

    * Começando e terminando uma aplicação curses

    * Janelas e Pads

    * Exibindo texto

      * Atributos e Cor

    * Entrada de usuário

    * Para mais informações

  * Descriptor Guide

    * Primer

      * Exemplo simples: um descritor que retorna uma constante

      * Pesquisas dinâmicas

      * Atributos gerenciados

      * Nomes personalizados

      * Pensamentos finais

    * Complete Practical Example

      * Validator class

      * Custom validators

      * Practical application

    * Technical Tutorial

      * Resumo

      * Definition and introduction

      * Descriptor protocol

      * Overview of descriptor invocation

      * Invocation from an instance

      * Invocation from a class

      * Invocation from super

      * Summary of invocation logic

      * Automatic name notification

      * ORM example

    * Pure Python Equivalents

      * Propriedades

      * Functions and methods

      * Kinds of methods

      * Static methods

      * Class methods

      * Member objects and __slots__

  * Depurando extensões de API C e Internos do CPython com GDB

    * Pré-requisitos

      * Configuração com Python construído a partir do código-fonte

      * Configuração para Python a partir de uma distribuição Linux

    * Usando a compilação de depuração e o modo de desenvolvimento

    * Usando a extensão "python-gdb"

      * Pretty-printers

      * "py-list"

      * "py-up" e "py-down"

      * "py-bt"

      * "py-print"

      * "py-locals"

    * Uso com comandos do GDB

  * HOWTO Enum

    * Acesso programático aos membros da enumeração e seus atributos.

    * Duplicar membros do enum e seus valores.

    * Garantindo valores únicos de enumeração

    * Usando valores automáticos

    * Iteração

    * Comparações

    * Allowed members and attributes of enumerations

    * Restricted Enum subclassing

    * Dataclass support

    * Pickling

    * API funcional

    * Derived Enumerations

      * IntEnum

      * StrEnum

      * IntFlag

      * Sinalizador

      * Others

    * When to use "__new__()" vs. "__init__()"

      * Finer Points

        * Nomes "__dunder__" suportados

        * Nomes "_sunder_" suportados

        * _Private__names

        * "Enum" member type

        * Creating members that are mixed with other data types

        * Boolean value of "Enum" classes and members

        * "Enum" classes with methods

        * Combining members of "Flag"

        * "Flag" and "IntFlag" minutia

    * How are Enums and Flags different?

      * Enum Classes

      * Flag Classes

      * Enum Members (aka instances)

      * Flag Members

    * Enum Cookbook

      * Omitting values

        * Using "auto"

        * Using "object"

        * Using a descriptive string

        * Usando um "__new__()" personalizado

      * OrderedEnum

      * DuplicateFreeEnum

      * Planet

      * TimePeriod

    * Subclassing EnumType

  * Programação Funcional COMO FAZER

    * Introdução

      * Probabilidade formal

      * Modularidade

      * Fácil de depurar e testar

      * Componibilidade

    * Iteradores

      * Tipos de Dados que Suportam Iteradores

    * Expressões do gerador e compreensões de lista

    * Geradores

      * Passando valores para um gerador

    * Funções embutidas

    * O módulo itertools

      * Criando novos iteradores

      * Calling functions on elements

      * Selecionando elementos

      * Combinatoric functions

      * Agrupando elementos

    * O módulo functools

      * O módulo operator

    * Pequenas funções e as expressões lambda

    * Histórico de Revisão e Reconhecimentos

    * Referências

      * Geral

      * Python-specific

      * Documentação do Python

  * HowTo - Logging

    * Tutorial Básico de Logging

      * Quando usar logging

      * Um exemplo simples

      * Logging em um arquivo

      * Logging dados de uma variável

      * Alterar o formato das mensagens exibidas

      * Exibindo data/hora em mensagens

      * Próximos Passos

    * Tutorial Avançado do Logging

      * Logging Flow

      * Registradores

      * Manipuladores

      * Formatadores

      * Configurando Logging

      * O que acontece se nenhuma configuração é fornecida

      * Configuring Logging for a Library

    * Logging Levels

      * Custom Levels

    * Useful Handlers

    * Exceções levantadas durante logging

    * Usando objetos arbitrários como mensagens

    * Optimização

    * Outros recursos

  * Livro de Receitas do Logging

    * Usando logging em vários módulos

    * Logging from multiple threads

    * Multiple handlers and formatters

    * Logging to multiple destinations

    * Custom handling of levels

    * Configuration server example

    * Dealing with handlers that block

    * Sending and receiving logging events across a network

      * Running a logging socket listener in production

    * Adding contextual information to your logging output

      * Using LoggerAdapters to impart contextual information

        * Using objects other than dicts to pass contextual
          information

      * Using Filters to impart contextual information

    * Use of "contextvars"

    * Imparting contextual information in handlers

    * Logging to a single file from multiple processes

      * Using concurrent.futures.ProcessPoolExecutor

      * Deploying Web applications using Gunicorn and uWSGI

    * Using file rotation

    * Use of alternative formatting styles

    * Personalizando o "LogRecord"

    * Subclassing QueueHandler - a ZeroMQ example

    * Subclassing QueueListener - a ZeroMQ example

    * An example dictionary-based configuration

    * Using a rotator and namer to customize log rotation processing

    * A more elaborate multiprocessing example

    * Inserting a BOM into messages sent to a SysLogHandler

    * Implementing structured logging

    * Customizing handlers with "dictConfig()"

    * Using particular formatting styles throughout your application

      * Using LogRecord factories

      * Using custom message objects

    * Configuring filters with "dictConfig()"

    * Customized exception formatting

    * Speaking logging messages

    * Buffering logging messages and outputting them conditionally

    * Sending logging messages to email, with buffering

    * Formatting times using UTC (GMT) via configuration

    * Using a context manager for selective logging

    * A CLI application starter template

    * A Qt GUI for logging

    * Logging to syslog with RFC5424 support

    * How to treat a logger like an output stream

    * Patterns to avoid

      * Opening the same log file multiple times

      * Using loggers as attributes in a class or passing them as
        parameters

      * Adding handlers other than "NullHandler" to a logger in a
        library

      * Creating a lot of loggers

    * Outros recursos

  * Expressões Regulares HOWTO

    * Introdução

    * Padrões Simples

      * Caracteres Correspondentes

      * Repetindo Coisas

    * Usando expressões regulares

      * Compilando Expressões Regulares

      * A praga da barra invertida

      * Executando Comparações

      * Funções de Nível de Módulo

      * Sinalizadores de Compilação

    * Mais Poder dos Padrões

      * Mais Metacaracteres

      * Agrupamento

      * Não captura e Grupos Nomeados

      * Afirmações Lookahead

    * Modificando Strings

      * Dividindo as Strings

      * Busca e Substituição

    * Problemas Comuns

      * Usando String Methods

      * match() versus search()

      * Gulosos versus não Gulosos

      * Usando re.VERBOSE

    * Comentários

  * HOWTO sobre a Programação de Soquetes

    * Soquetes

      * História

    * Criando um Soquete

      * IPC

    * Usando um Soquete

      * Dados Binários

    * Desconectando

      * Quando o Soquete Morre

    * Soquetes não-bloqueantes

  * Sorting Techniques

    * Básico de Ordenação

    * Funções Chave

    * Operator Module Functions and Partial Function Evaluation

    * Ascendente e Descendente

    * Estabilidade de Ordenação e Ordenações Complexas

    * Decorate-Sort-Undecorate

    * Comparison Functions

    * Curiosidades e conclusões

    * Partial Sorts

  * Unicode HOWTO

    * Introdução ao Unicode

      * Definições

      * Encodings

      * Referências

    * Suporte a Unicode no Python

      * O Tipo String

      * Convertendo para Bytes

      * Unicode Literals in Python Source Code

      * Propriedades Unicode

      * Comparando Strings

      * Expressões Regulares Unicode

      * Referências

    * Reading and Writing Unicode Data

      * Nomes de arquivos Unicode

      * Tips for Writing Unicode-aware Programs

        * Converting Between File Encodings

        * Files in an Unknown Encoding

      * Referências

    * Reconhecimentos

  * Como Buscar Recursos Da Internet Usando O Pacote urllib

    * Introdução

    * Acessando URLs

      * Data

      * Headers

    * Tratamento de exceções

      * URLError

      * HTTPError

        * Error Codes

      * Wrapping it Up

        * Number 1

        * Number 2

    * info and geturl

    * Openers and Handlers

    * Basic Authentication

    * Proxies

    * Sockets and Layers

    * Notas de rodapé

  * Tutorial de Argparse

    * Conceitos

    * O básico

    * Apresentando os argumentos posicionais

    * Apresentando os argumentos opcionais

      * Opções curtas

    * Combinando argumentos posicionais e opcionais

    * Avançando um pouco mais

      * Specifying ambiguous arguments

      * Opções conflitantes

    * How to translate the argparse output

    * Conclusão

  * Uma introdução ao módulo ipaddress

    * Criando objetos de Endereço/Rede/Interface

      * A Note on IP Versions

      * IP Host Addresses

      * Defining Networks

      * Host Interfaces

    * Inspecting Address/Network/Interface Objects

    * Networks as lists of Addresses

    * Comparações

    * Using IP Addresses with other modules

    * Getting more detail when instance creation fails

  * Instrumentando o CPython com DTrace e SystemTap

    * Enabling the static markers

    * Static DTrace probes

    * Static SystemTap markers

    * Available static markers

    * SystemTap Tapsets

    * Exemplos

  * Python support for the Linux "perf" profiler

    * How to enable "perf" profiling support

    * How to obtain the best results

  * Boas Práticas de Anotação

    * Acessando O Dicionário De Anotações De Um Objeto No Python 3.10
      E Nas Versões Mais Recente.

    * Acessando O Dicionário De Anotações De Um Objeto No Python 3.9 E
      Nas Versões Mais Antigas.

    * Manually Un-Stringizing Stringized Annotations

    * Melhores Prática Para "__annotations__" Em Qualquer Versão
      Python

    * "__annotations__" Quirks

  * Isolating Extension Modules

    * Who should read this

    * Background

      * Enter Per-Module State

      * Isolated Module Objects

      * Surprising Edge Cases

    * Making Modules Safe with Multiple Interpreters

      * Managing Global State

      * Managing Per-Module State

      * Opt-Out: Limiting to One Module Object per Process

      * Module State Access from Functions

    * Heap Types

      * Changing Static Types to Heap Types

      * Defining Heap Types

      * Garbage-Collection Protocol

        * "tp_traverse" in Python 3.8 and lower

        * Delegating "tp_traverse"

        * Defining "tp_dealloc"

        * Not overriding "tp_free"

        * Avoiding "PyObject_New"

      * Module State Access from Classes

      * Module State Access from Regular Methods

      * Module State Access from Slot Methods, Getters and Setters

      * Lifetime of the Module State

    * Open Issues

      * Per-Class Scope

      * Lossless Conversion to Heap Types

* Perguntas Frequentes Sobre Python

  * Python Geral

    * Informações gerais

    * Python no mundo real

  * FAQ referente a Programação

    * Questões Gerais

    * Núcleo da Linguagem

    * Números e Strings

    * Performance

    * Sequencias (Tuples/Lists)

    * Objetos

    * Módulos

  * Design e Histórico FAQ

    * Por que o Python usa indentação para agrupamento de declarações?

    * Por que eu estou recebendo resultados estranhos com simples
      operações aritméticas?

    * Por que o calculo de pontos flutuantes são tão imprecisos?

    * Por que strings do Python são imutáveis?

    * Por que o 'self' deve ser usado explicitamente em definições de
      método e chamadas?

    * Por que não posso usar uma atribuição em uma expressão?

    * Por que o Python usa métodos para algumas funcionalidades (ex:
      lista.index()) mas funções para outras (ex: len(lista))?

    * Por que o join() é um método de string em vez de ser um método
      de lista ou tupla?

    * O quão rápidas são as exceções?

    * Por que não existe uma instrução de switch ou case no Python?

    * Can't you emulate threads in the interpreter instead of relying
      on an OS-specific thread implementation?

    * Por que expressões lambda não podem conter instruções?

    * O Python pode ser compilado para linguagem de máquina, C ou
      alguma outra linguagem?

    * Como o Python gerencia memória?

    * Por que o CPython não usa uma forma mais tradicional de esquema
      de coleta de lixo?

    * Por que toda memória não é liberada quando o CPython fecha?

    * Por que existem tipos de dados separados para tuplas e listas?

    * Como as listas são implementadas no CPython?

    * Como são os dicionários implementados no CPython?

    * Por que chaves de dicionário devem ser imutáveis?

    * Por que lista.sort() não retorna a lista ordenada?

    * How do you specify and enforce an interface spec in Python?

    * Why is there no goto?

    * Por que strings brutas (r-strings) não podem terminar com uma
      contrabarra?

    * Por que o Python não tem uma instrução "with" para atribuição de
      atributos?

    * Por que os geradores não suportam a instrução with?

    * Por que dois pontos são necessários para as instruções de
      if/while/def/class?

    * Por que o Python permite vírgulas ao final de listas e tuplas?

  * FAQ de Bibliotecas e Extensões

    * Questões gerais sobre bibliotecas

    * Tarefas comuns

    * Threads

    * Entrada e Saída

    * Programação Rede / Internet

    * Base de Dados

    * Matemáticos e Numéricos

  * FAQ sobre Extensão/Incorporação

    * Posso criar minhas próprias funções em C?

    * Posso criar minhas próprias funções em C++?

    * A escrita em C é difícil, Há algumas alternativas?

    * Como posso executar instruções arbitrárias de Python a partir de
      C?

    * How can I evaluate an arbitrary Python expression from C?

    * Como extraio valores em C a partir de um objeto Python?

    * Como posso utilizar Py_BuildValue() para criar uma tupla de
      comprimento arbitrário?

    * How do I call an object's method from C?

    * How do I catch the output from PyErr_Print() (or anything that
      prints to stdout/stderr)?

    * How do I access a module written in Python from C?

    * How do I interface to C++ objects from Python?

    * I added a module using the Setup file and the make fails; why?

    * How do I debug an extension?

    * I want to compile a Python module on my Linux system, but some
      files are missing. Why?

    * How do I tell "incomplete input" from "invalid input"?

    * How do I find undefined g++ symbols __builtin_new or
      __pure_virtual?

    * Can I create an object class with some methods implemented in C
      and others in Python (e.g. through inheritance)?

  * Python no Windows

    * Como faço para executar um programa Python no Windows?

    * Como eu faço para criar programas Python executáveis?

    * Por que Python às vezes demora tanto para iniciar?

    * Como eu faço para criar um executável a partir de um código
      Python?

    * Um arquivo "*.pyd" é o mesmo que um DLL?

    * Como eu posso embutir Python dentro de uma aplicação do Windows?

    * Como eu impeço editores de adicionarem tabulações na minha
      source do Python?

    * Como faço para verificar uma tecla pressionada sem bloquear?

    * Como resolvo o erro da api-ms-win-crt-runtime-l1-1-0.dll
      ausente?

  * FAQ da Interface Gráfica do Usuário

    * Perguntas Gerais sobre a GUI

    * Quais toolkits de GUI existem para o Python?

    * Perguntas do Tkinter

  * FAD de "Por que o Python está instalado em meu computador?"

    * O que é Python?

    * Porque Python está instalado em minha máquina?

    * Eu posso apagar o Python?

* Glossário

* Sobre esses documentos

  * Contribuidores da Documentação Python

* Lidando com bugs

  * Bugs na documentação

  * Usando o rastreador de problemas do Python

  * Começando a contribuir com o Python por conta própria

* Direitos autorais

* História e Licença

  * História do software

  * Termos e condições para acessar ou usar Python

    * ACORDO DE LICENCIAMENTO DA PSF PARA PYTHON 3.12.2

    * ACORDO DE LICENCIAMENTO DA BEOPEN.COM PARA PYTHON 2.0

    * CONTRATO DE LICENÇA DA CNRI PARA O PYTHON 1.6.1

    * ACORDO DE LICENÇA DA CWI PARA PYTHON 0.9.0 A 1.2

    * LICENÇA BSD DE ZERO CLÁUSULA PARA CÓDIGO NA DOCUMENTAÇÃO DO
      PYTHON 3.12.2

  * Licenças e Reconhecimentos para Software Incorporado

    * Mersenne Twister

    * Soquetes

    * Serviços de soquete assíncrono

    * Gerenciamento de cookies

    * Rastreamento de execução

    * Funções UUencode e UUdecode

    * Chamadas de procedimento remoto XML

    * test_epoll

    * kqueue de seleção

    * SipHash24

    * strtod e dtoa

    * OpenSSL

    * expat

    * libffi

    * zlib

    * cfuhash

    * libmpdec

    * Conjunto de testes C14N do W3C

    * Audioop

    * asyncio
