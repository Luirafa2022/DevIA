"dataclasses" --- Data Classes
******************************

**Código-fonte:** Lib/dataclasses.py

======================================================================

Este módulo fornece um decorador e funções para adicionar
automaticamente *métodos especiais* tais como "__init__()" e
"__repr__()" a classes definidas pelo usuário. Foi originalmente
descrita em **PEP 557**.

Variáveis-membro a serem usadas nesses métodos gerados são definidas
usando as anotações de tipo da **PEP 526**. Por exemplo, esse código:

   from dataclasses import dataclass

   @dataclass
   class InventoryItem:
       """Class for keeping track of an item in inventory."""
       name: str
       unit_price: float
       quantity_on_hand: int = 0

       def total_cost(self) -> float:
           return self.unit_price * self.quantity_on_hand

adicionará, entre outras coisas, um "__init__()" como esse:

   def __init__(self, name: str, unit_price: float, quantity_on_hand: int = 0):
       self.name = name
       self.unit_price = unit_price
       self.quantity_on_hand = quantity_on_hand

Observe que este método é adicionado automaticamente à classe: ele não
é especificado diretamente na definição "InventoryItem" mostrada
acima.

Novo na versão 3.7.


Conteúdo do módulo
==================

@dataclasses.dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False)

   Esta função é um *decorador* que é usado para adicionar *métodos
   especiais* para classes, conforme descrito abaixo.

   O decorador "dataclass()" examina a classe para encontrar campos
   ("field".  Um "field" é definido como uma variável de classe que
   tem uma *anotação de tipo*.  Com duas exceções, descritas mais
   adiante, "dataclass()" não examina o tipo especificado na anotação
   de variável.

   A ordem dos campos em todos os métodos gerados é a ordem em que
   eles aparecem na definição de classe.

   O decorador "dataclass()" adicionará vários métodos "dunder" à
   classe, descritos abaixo. Se algum dos métodos adicionados já
   existir na classe, o comportamento dependerá do parâmetro, conforme
   documentado abaixo. O decorador retorna a mesma classe decorada;
   nenhuma nova classe é criada.

   Se "dataclass()" for usado apenas como um simples decorador, sem
   parâmetros, ele age como se tivesse os valores padrão documentados
   nessa assinatura. Ou seja, esses três usos de "dataclass()" são
   equivalentes:

      @dataclass
      class C:
          ...

      @dataclass()
      class C:
          ...

      @dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False,
                 match_args=True, kw_only=False, slots=False, weakref_slot=False)
      class C:
          ...

   Os parâmetros do "dataclass()" são:

   * "init": Se verdadeiro (o padrão), o método "__init__()" será
     gerado.

     Se a classe do usuário definir "__init__()" esse parâmetro é
     ignorado.

   * "repr": Se verdadeiro (o padrão), um método "__repr__()" será
     gerado. A sequência de string de representação gerada terá o nome
     da classe e o nome e representação de cada campo, na ordem em que
     são definidos na classe. Os campos marcados como excluídos da
     representação não são incluídos. Por exemplo:
     "InventoryItem(name='widget', unit_price=3.0,
     quantity_on_hand=10)".

     Se a classe do usuário definir "__repr__()" esse parâmetro é
     ignorado.

   * "eq": Se verdadeiro (o padrão), um método "__eq__()" será gerado.
     Este método compara a classe como se fosse uma tupla de campos,
     em ordem. Ambas as instâncias na comparação devem ser de tipo
     idêntico.

     Se a classe do usuário definir "__eq__()" esse parâmetro é
     ignorado.

   * "order": Se verdadeiro (o padrão é "False"), os métodos
     "__lt__()", "__le__()", "__gt__()" e "__ge__()" serão gerados.
     Comparam a classe como se fosse uma tupla de campos, em ordem.
     Ambas instâncias na comparação devem ser de tipo idêntico.  Se
     "order" é verdadeiro e "eq" é falso, a exceção "ValueError" é
     levantada.

     Se a classe do usuário já define algum dentre "__lt__()",
     "__le__()", "__gt__()" ou "__ge__()", então "TypeError" é
     levantada.

   * "unsafe_hash": Se "False" (o padrão), um método "__hash__()" é
     gerado, conforme "eq" e "frozen" estão configurados.

     "__hash__()" é usado para prover o método "hash()", e quando
     objetos são adicionados a coleções do tipo dicionário ou
     conjunto.  Ter um método "__hash__()" implica que instâncias da
     classe serão imutáveis. Mutabilidade é uma propriedade
     complicada, que depende da intenção do programador, da existência
     e comportamento do método  "__eq__()", e dos valores dos
     parâmetros "eq" e "frozen" no decorador "dataclass()" .

     Por padrão, "dataclass()" não vai adicionar implicitamente um
     método "__hash__()", a menos que seja seguro fazê-lo.  Nem irá
     adicionar ou modificar um método "__hash__()" existente, definido
     explicitamente. Configurar o atributo de classe "__hash__ = None"
     tem um significado específico para o Python, conforme descrito na
     documentação do "__hash__()".

     Se "__hash__()" não é definido explicitamente, ou se é
     configurado como "None", então "dataclass()" *pode* adicionar um
     método "__hash__()" implícito. Mesmo que não seja recomendado,
     pode-se forçar "dataclass()" a criar um método "__hash__()" com
     "unsafe_hash=True". Este pode ser o caso se sua classe é
     logicamente imutável, mas na prática pode ser mudada. Esse é um
     caso de uso específico e deve ser considerado com muito cuidado.

     Essas são as regras governando a criação implícita de um método
     "__hash__()".  Observe que não pode ter um método "__hash__()"
     explícito na dataclass e configurar "unsafe_hash=True"; isso
     resultará em um "TypeError".

     Se "eq" e "frozen" são ambos verdadeiros, por padrão
     "dataclass()" vai gerar um método "__hash__()".  Se "eq" é
     verdadeiro e "frozen" é falso, "__hash__()" será configurado para
     "None", marcando a classe como não hasheável (já que é mutável).
     Se "eq" é falso, "__hash__()" será deixado intocado, o que
     significa que o método "__hash__()" da superclasse será usado (se
     a superclasse é "object", significa que voltará para o hash
     baseado em id).

   * "frozen": Se verdadeiro (o padrão é "False"), atribuições para os
     campos vão gerar uma exceção. Imita instâncias congeladas,
     somente leitura. Se "__setattr__()" ou "__delattr__()" é definido
     na classe, a exceção  "TypeError" é levantada. Veja a discussão
     abaixo.

   * "match_args": Se verdadeiro (o padrão é "True"), a tupla
     "__match_args__" será criada a partir da lista de parâmetros para
     o método "__init__()" gerado (mesmo se "__init__()" não for
     gerado, veja acima). Se falso, ou se "__match_args__" já estiver
     definido na classe, então "__match_args__" não será gerado.

      Novo na versão 3.10.

   * "kw_only": Se verdadeiro (o valor padrão é "False"), então todos
     os campos serão marcados como somente-nomeado. Se um campo for
     marcado como somente-nomeado, então o único efeito é que o
     parâmetro "__init__()" gerado a partir de um campo somente-
     nomeado deve ser especificado com um campo quando "__init__()" é
     chamado. Não há efeito em nenhum outro aspecto das classes de
     dados. Veja a entrada *parâmetro* do glossário para detalhes.
     Veja também a seção "KW_ONLY".

      Novo na versão 3.10.

   * "slots": Se true (o padrão é "False"), o atributo "__slots__"
     será gerado e uma nova classe será retornada no lugar da
     original. Se "__slots__" já estiver definido na classe, então
     "TypeError" será levantada.

      Novo na versão 3.10.

      Alterado na versão 3.11: Se um nome de campo já estiver incluído
      no "__slots__" de uma classe base, ele não será incluído no
      "__slots__" gerado para evitar substitui-los. Portanto, não use
      "__slots__" para recuperar os nomes dos campos de uma classe de
      dados. Use "fields()" em vez disso. Para poder determinar os
      slots herdados, a classe base "__slots__" pode ser qualquer
      iterável, mas *não* um iterador.

   * "weakref_slot": Se verdadeiro (o padrão é "False"), adicione um
     slot chamado "__weakref__", que é necessário para tornar uma
     instância fraca. É um erro especificar "weakref_slot=True" sem
     também especificar "slots=True".

      Novo na versão 3.11.

   "field"s pode opcionalmente especificar um valor padrão, usando
   sintaxe Python normal:

      @dataclass
      class C:
          a: int       # 'a' has no default value
          b: int = 0   # assign a default value for 'b'

   Nesse exemplo,  "a" e "b" serão incluídos no método "__init__()"
   adicionado, que será definido como:

      def __init__(self, a: int, b: int = 0):

   "TypeError" será levantada se um campo sem valor padrão for
   definido após um campo com valor padrão.  Isso é verdadeiro se
   ocorrer numa classe simples, ou como resultado de uma herança de
   classe.

dataclasses.field(*, default=MISSING, default_factory=MISSING, init=True, repr=True, hash=None, compare=True, metadata=None, kw_only=MISSING)

   Para casos de uso comuns e simples, nenhuma outra funcionalidade é
   necessária. Existem, no entanto, alguns recursos que requerem
   informações adicionais por campo. Para satisfazer essa necessidade
   de informações adicionais, você pode substituir o valor do campo
   padrão por uma chamada para a função "field()" fornecida. Por
   exemplo:

      @dataclass
      class C:
          mylist: list[int] = field(default_factory=list)

      c = C()
      c.mylist += [1, 2, 3]

   Como mostrado acima, o valor "MISSING" é um objeto sentinela usado
   para detectar se alguns parâmetros são fornecidos pelo usuário.
   Este sentinela é usado porque "None" é um valor válido para alguns
   parâmetros com um significado distinto.  Nenhum código deve usar
   diretamente o valor "MISSING".

   Os parâmetros de "field()" são:

   * "default": Se fornecido, este será o valor padrão para este
     campo. Isso é necessário porque a própria chamada "field()"
     substitui a posição normal do valor padrão.

   * "default_factory": Se fornecido, deve ser um chamável sem
     argumento que será chamado quando um valor padrão for necessário
     para este campo. Entre outras finalidades, isso pode ser usado
     para especificar campos com valores padrão mutáveis, conforme
     discutido abaixo. É um erro especificar ambos "default" e
     "default_factory".

   * "init": Se verdadeiro (o padrão), este campo é incluído como um
     parâmetro para o método "__init__()" gerado.

   * "repr": Se verdadeiro (o padrão), este campo é incluído na string
     retornada pelo método "__repr__()" gerado.

   * "hash": Pode ser um bool ou "None". Se verdadeiro, este campo é
     incluído no método "__hash__()" gerado. Se "None" (o padrão), usa
     o valor de "compare": este seria normalmente o comportamento
     esperado. Um campo deve ser considerado no hash se for usado para
     comparações. Definir este valor para algo diferente de "None" é
     desencorajado.

     Uma possível razão para definir "hash=False" mas "compare=True"
     seria se um campo for caro para calcular um valor de hash, esse
     campo for necessário para teste de igualdade e houver outros
     campos que contribuem para o valor de hash do tipo. Mesmo que um
     campo seja excluído do hash, ele ainda será usado para
     comparações.

   * "compare": Se verdadeiro (o padrão), este campo é incluído nos
     métodos de igualdade e comparação gerados ("__eq__()",
     "__gt__()", etc.).

   * "metadata": Pode ser um mapeamento ou None. None é tratado como
     um dicionário vazio. Este valor é agrupado em
     "MappingProxyType()" para torná-lo somente leitura e exposto no
     objeto "Field". Ele não é usado por Data Classes e é fornecido
     como um mecanismo de extensão de terceiros. Vários terceiros
     podem ter sua própria chave, para usar como um espaço de nomes
     nos metadados.

   * "kw_only": Se verdadeiro, este campo será marcado como somente-
     nomeado. Isso é usado quando os parâmetros do método "__init__()"
     gerados são calculados.

      Novo na versão 3.10.

   Se o valor padrão de um campo for especificado por uma chamada para
   "field()", então o atributo de classe para este campo será
   substituído pelo valor de "default" especificado. Se "default" não
   for fornecido, o atributo de classe será excluído. A intenção é
   que, após a execução do decorador "dataclass()", todos os atributos
   de classe conterão os valores padrão para os campos, como se o
   próprio valor padrão fosse especificado. Por exemplo, depois de:

      @dataclass
      class C:
          x: int
          y: int = field(repr=False)
          z: int = field(repr=False, default=10)
          t: int = 20

   O atributo de classe "C.z" será "10", o atributo de classe "C.t"
   será "20" e os atributos de classe "C.x" e "C.y" não serão
   definidos.

class dataclasses.Field

   Objetos "Field" descrevem cada campo definido. Esses objetos são
   criados internamente e são retornados pelo método de nível de
   módulo "fields()" (veja abaixo). Os usuários nunca devem instanciar
   um objeto "Field" diretamente. Seus atributos documentados são:

   * "name": O nome do campo.

   * "type": O tipo do campo.

   * "default", "default_factory", "init", "repr", "hash", "compare",
     "metadata" e "kw_only" têm significado e valores idênticos aos da
     função "field()".

   Outros atributos podem existir, mas são privados e não devem ser
   inspecionados ou confiáveis.

dataclasses.fields(class_or_instance)

   Retorna uma tupla de objetos "Field" que definem os campos para
   esta classe de dados. Aceita uma classe de dados ou uma instância
   de uma classe de dados. Levanta "TypeError" se não for passada uma
   classe de dados ou instância de uma. Não retorna pseudocampos que
   são "ClassVar" ou "InitVar".

dataclasses.asdict(obj, *, dict_factory=dict)

   Converte a classe de dados "obj" em um dicionário (usando a função
   de fábrica "dict_factory"). Cada classe de dados é convertida em um
   dicionário de seus campos, como pares "nome: valor". Pode-se fazer
   recursividade em classes de dados, dicionários, listas e tuplas.
   Outros objetos são copiados com "copy.deepcopy()".

   Exemplo de uso de "asdict()" em classes de dados aninhadas:

      @dataclass
      class Point:
           x: int
           y: int

      @dataclass
      class C:
           mylist: list[Point]

      p = Point(10, 20)
      assert asdict(p) == {'x': 10, 'y': 20}

      c = C([Point(0, 0), Point(10, 4)])
      assert asdict(c) == {'mylist': [{'x': 0, 'y': 0}, {'x': 10, 'y': 4}]}

   Para criar uma cópia rasa, a seguinte solução alternativa pode ser
   usada:

      dict((field.name, getattr(obj, field.name)) for field in fields(obj))

   "asdict()" levanta "TypeError" se "obj" não é uma instância de
   classe de dados.

dataclasses.astuple(obj, *, tuple_factory=tuple)

   Converte a classe de dados "obj" em uma tupla (usando a função de
   fábrica "tuple_factory"). Cada classe de dados é convertida em uma
   tupla de seus campos. Pode-se fazer recursividade em classes de
   dados, dicionários, listas e tuplas. Outros objetos são copiados
   com "copy.deepcopy()".

   Continuando a partir do exemplo anterior:

      assert astuple(p) == (10, 20)
      assert astuple(c) == ([(0, 0), (10, 4)],)

   Para criar uma cópia rasa, a seguinte solução alternativa pode ser
   usada:

      tuple(getattr(obj, field.name) for field in dataclasses.fields(obj))

   "astuple()" levanta "TypeError" se "obj" não é uma instância de
   classe de dados.

dataclasses.make_dataclass(cls_name, fields, *, bases=(), namespace=None, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False, match_args=True, kw_only=False, slots=False, weakref_slot=False, module=None)

   Creates a new dataclass with name "cls_name", fields as defined in
   "fields", base classes as given in "bases", and initialized with a
   namespace as given in "namespace".  "fields" is an iterable whose
   elements are each either "name", "(name, type)", or "(name, type,
   Field)".  If just "name" is supplied, "typing.Any" is used for
   "type".  The values of "init", "repr", "eq", "order",
   "unsafe_hash", "frozen", "match_args", "kw_only", "slots", and
   "weakref_slot" have the same meaning as they do in "dataclass()".

   If "module" is defined, the "__module__" attribute of the dataclass
   is set to that value. By default, it is set to the module name of
   the caller.

   This function is not strictly required, because any Python
   mechanism for creating a new class with "__annotations__" can then
   apply the "dataclass()" function to convert that class to a
   dataclass.  This function is provided as a convenience.  For
   example:

      C = make_dataclass('C',
                         [('x', int),
                           'y',
                          ('z', int, field(default=5))],
                         namespace={'add_one': lambda self: self.x + 1})

   É equivalente a:

      @dataclass
      class C:
          x: int
          y: 'typing.Any'
          z: int = 5

          def add_one(self):
              return self.x + 1

dataclasses.replace(obj, /, **changes)

   Creates a new object of the same type as "obj", replacing fields
   with values from "changes".  If "obj" is not a Data Class, raises
   "TypeError".  If values in "changes" do not specify fields, raises
   "TypeError".

   The newly returned object is created by calling the "__init__()"
   method of the dataclass.  This ensures that "__post_init__()", if
   present, is also called.

   Init-only variables without default values, if any exist, must be
   specified on the call to "replace()" so that they can be passed to
   "__init__()" and "__post_init__()".

   It is an error for "changes" to contain any fields that are defined
   as having "init=False".  A "ValueError" will be raised in this
   case.

   Be forewarned about how "init=False" fields work during a call to
   "replace()".  They are not copied from the source object, but
   rather are initialized in "__post_init__()", if they're initialized
   at all.  It is expected that "init=False" fields will be rarely and
   judiciously used.  If they are used, it might be wise to have
   alternate class constructors, or perhaps a custom "replace()" (or
   similarly named) method which handles instance copying.

dataclasses.is_dataclass(obj)

   Return "True" if its parameter is a dataclass or an instance of
   one, otherwise return "False".

   Se você precisa saber se a classe é uma instância de dataclass (e
   não a dataclass de fato), então adicione uma verificação para "not
   isinstance(obj, type)":

      def is_dataclass_instance(obj):
          return is_dataclass(obj) and not isinstance(obj, type)

dataclasses.MISSING

   A sentinel value signifying a missing default or default_factory.

dataclasses.KW_ONLY

   A sentinel value used as a type annotation.  Any fields after a
   pseudo-field with the type of "KW_ONLY" are marked as keyword-only
   fields.  Note that a pseudo-field of type "KW_ONLY" is otherwise
   completely ignored.  This includes the name of such a field.  By
   convention, a name of "_" is used for a "KW_ONLY" field.  Keyword-
   only fields signify "__init__()" parameters that must be specified
   as keywords when the class is instantiated.

   In this example, the fields "y" and "z" will be marked as keyword-
   only fields:

      @dataclass
      class Point:
          x: float
          _: KW_ONLY
          y: float
          z: float

      p = Point(0, y=1.5, z=2.0)

   In a single dataclass, it is an error to specify more than one
   field whose type is "KW_ONLY".

   Novo na versão 3.10.

exception dataclasses.FrozenInstanceError

   Raised when an implicitly defined "__setattr__()" or
   "__delattr__()" is called on a dataclass which was defined with
   "frozen=True". It is a subclass of "AttributeError".


Processamento pós-inicialização
===============================

dataclasses.__post_init__()

   When defined on the class, it will be called by the generated
   "__init__()", normally as "self.__post_init__()". However, if any
   "InitVar" fields are defined, they will also be passed to
   "__post_init__()" in the order they were defined in the class.  If
   no "__init__()" method is generated, then "__post_init__()" will
   not automatically be called.

   Among other uses, this allows for initializing field values that
   depend on one or more other fields.  For example:

      @dataclass
      class C:
          a: float
          b: float
          c: float = field(init=False)

          def __post_init__(self):
              self.c = self.a + self.b

The "__init__()" method generated by "dataclass()" does not call base
class "__init__()" methods. If the base class has an "__init__()"
method that has to be called, it is common to call this method in a
"__post_init__()" method:

   class Rectangle:
       def __init__(self, height, width):
         self.height = height
         self.width = width

   @dataclass
   class Square(Rectangle):
       side: float

       def __post_init__(self):
           super().__init__(self.side, self.side)

Note, however, that in general the dataclass-generated "__init__()"
methods don't need to be called, since the derived dataclass will take
care of initializing all fields of any base class that is a dataclass
itself.

See the section below on init-only variables for ways to pass
parameters to "__post_init__()".  Also see the warning about how
"replace()" handles "init=False" fields.


Variáveis de classe
===================

One of the few places where "dataclass()" actually inspects the type
of a field is to determine if a field is a class variable as defined
in **PEP 526**.  It does this by checking if the type of the field is
"typing.ClassVar".  If a field is a "ClassVar", it is excluded from
consideration as a field and is ignored by the dataclass mechanisms.
Such "ClassVar" pseudo-fields are not returned by the module-level
"fields()" function.


Variáveis de inicialização apenas
=================================

Another place where "dataclass()" inspects a type annotation is to
determine if a field is an init-only variable.  It does this by seeing
if the type of a field is of type "dataclasses.InitVar".  If a field
is an "InitVar", it is considered a pseudo-field called an init-only
field.  As it is not a true field, it is not returned by the module-
level "fields()" function.  Init-only fields are added as parameters
to the generated "__init__()" method, and are passed to the optional
"__post_init__()" method.  They are not otherwise used by dataclasses.

For example, suppose a field will be initialized from a database, if a
value is not provided when creating the class:

   @dataclass
   class C:
       i: int
       j: int | None = None
       database: InitVar[DatabaseType | None] = None

       def __post_init__(self, database):
           if self.j is None and database is not None:
               self.j = database.lookup('j')

   c = C(10, database=my_database)

In this case, "fields()" will return "Field" objects for "i" and "j",
but not for "database".


Frozen instances
================

It is not possible to create truly immutable Python objects.  However,
by passing "frozen=True" to the "dataclass()" decorator you can
emulate immutability.  In that case, dataclasses will add
"__setattr__()" and "__delattr__()" methods to the class.  These
methods will raise a "FrozenInstanceError" when invoked.

There is a tiny performance penalty when using "frozen=True":
"__init__()" cannot use simple assignment to initialize fields, and
must use "object.__setattr__()".


Herança
=======

When the dataclass is being created by the "dataclass()" decorator, it
looks through all of the class's base classes in reverse MRO (that is,
starting at "object") and, for each dataclass that it finds, adds the
fields from that base class to an ordered mapping of fields. After all
of the base class fields are added, it adds its own fields to the
ordered mapping.  All of the generated methods will use this combined,
calculated ordered mapping of fields.  Because the fields are in
insertion order, derived classes override base classes.  An example:

   @dataclass
   class Base:
       x: Any = 15.0
       y: int = 0

   @dataclass
   class C(Base):
       z: int = 10
       x: int = 15

A lista final de campos é, em ordem, "x", "y", "z". O tipo final de
"x" é "int", conforme especificado na classe "C".

The generated "__init__()" method for "C" will look like:

   def __init__(self, x: int = 15, y: int = 0, z: int = 10):


Re-ordering of keyword-only parameters in "__init__()"
======================================================

After the parameters needed for "__init__()" are computed, any
keyword-only parameters are moved to come after all regular (non-
keyword-only) parameters.  This is a requirement of how keyword-only
parameters are implemented in Python: they must come after non-
keyword-only parameters.

In this example, "Base.y", "Base.w", and "D.t" are keyword-only
fields, and "Base.x" and "D.z" are regular fields:

   @dataclass
   class Base:
       x: Any = 15.0
       _: KW_ONLY
       y: int = 0
       w: int = 1

   @dataclass
   class D(Base):
       z: int = 10
       t: int = field(kw_only=True, default=0)

The generated "__init__()" method for "D" will look like:

   def __init__(self, x: Any = 15.0, z: int = 10, *, y: int = 0, w: int = 1, t: int = 0):

Note that the parameters have been re-ordered from how they appear in
the list of fields: parameters derived from regular fields are
followed by parameters derived from keyword-only fields.

The relative ordering of keyword-only parameters is maintained in the
re-ordered "__init__()" parameter list.


Funções padrão de fábrica
=========================

If a "field()" specifies a "default_factory", it is called with zero
arguments when a default value for the field is needed.  For example,
to create a new instance of a list, use:

   mylist: list = field(default_factory=list)

If a field is excluded from "__init__()" (using "init=False") and the
field also specifies "default_factory", then the default factory
function will always be called from the generated "__init__()"
function.  This happens because there is no other way to give the
field an initial value.


Valores padrão mutáveis
=======================

Python stores default member variable values in class attributes.
Consider this example, not using dataclasses:

   class C:
       x = []
       def add(self, element):
           self.x.append(element)

   o1 = C()
   o2 = C()
   o1.add(1)
   o2.add(2)
   assert o1.x == [1, 2]
   assert o1.x is o2.x

Note that the two instances of class "C" share the same class variable
"x", as expected.

Usando dataclasses, *se* este código fosse válido:

   @dataclass
   class D:
       x: list = []      # This code raises ValueError
       def add(self, element):
           self.x.append(element)

Geraria código similar a:

   class D:
       x = []
       def __init__(self, x=x):
           self.x = x
       def add(self, element):
           self.x.append(element)

   assert D().x is D().x

This has the same issue as the original example using class "C". That
is, two instances of class "D" that do not specify a value for "x"
when creating a class instance will share the same copy of "x".
Because dataclasses just use normal Python class creation they also
share this behavior.  There is no general way for Data Classes to
detect this condition.  Instead, the "dataclass()" decorator will
raise a "ValueError" if it detects an unhashable default parameter.
The assumption is that if a value is unhashable, it is mutable.  This
is a partial solution, but it does protect against many common errors.

Using default factory functions is a way to create new instances of
mutable types as default values for fields:

   @dataclass
   class D:
       x: list = field(default_factory=list)

   assert D().x is not D().x

Alterado na versão 3.11: Instead of looking for and disallowing
objects of type "list", "dict", or "set", unhashable objects are now
not allowed as default values.  Unhashability is used to approximate
mutability.


Descriptor-typed fields
=======================

Fields that are assigned descriptor objects as their default value
have the following special behaviors:

* The value for the field passed to the dataclass's "__init__" method
  is passed to the descriptor's "__set__" method rather than
  overwriting the descriptor object.

* Similarly, when getting or setting the field, the descriptor's
  "__get__" or "__set__" method is called rather than returning or
  overwriting the descriptor object.

* To determine whether a field contains a default value, "dataclasses"
  will call the descriptor's "__get__" method using its class access
  form (i.e. "descriptor.__get__(obj=None, type=cls)".  If the
  descriptor returns a value in this case, it will be used as the
  field's default. On the other hand, if the descriptor raises
  "AttributeError" in this situation, no default value will be
  provided for the field.

   class IntConversionDescriptor:
       def __init__(self, *, default):
           self._default = default

       def __set_name__(self, owner, name):
           self._name = "_" + name

       def __get__(self, obj, type):
           if obj is None:
               return self._default

           return getattr(obj, self._name, self._default)

       def __set__(self, obj, value):
           setattr(obj, self._name, int(value))

   @dataclass
   class InventoryItem:
       quantity_on_hand: IntConversionDescriptor = IntConversionDescriptor(default=100)

   i = InventoryItem()
   print(i.quantity_on_hand)   # 100
   i.quantity_on_hand = 2.5    # calls __set__ with 2.5
   print(i.quantity_on_hand)   # 2

Note that if a field is annotated with a descriptor type, but is not
assigned a descriptor object as its default value, the field will act
like a normal field.
